parameters:
  imageBuilderImage: null
  manifest: null
  timeoutInMinutes: null
  matrix: {}
phases:
  - phase: Linux_arm32v7
    queue:
      name: DotNetCore-Infra
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      demands:
        - VSTS_OS -equals Windows_10_Enterprise
        - DockerVersion
      parallel: 2
      matrix: ${{ parameters.matrix }}
    variables:
      docker.baseArtifactName: $(Build.BuildId)
      docker.certVolumeArg: -v cert_$(docker.baseArtifactName):/docker-certs
      docker.commonRunArgs: --rm -v $(docker.repoVolumeName):/repo -w /repo $(docker.certVolumeArg) -e DOCKER_CERT_PATH=/docker-certs -e DOCKER_TLS_VERIFY=1 -e DOCKER_HOST=tcp://$(PiIp):2376
      docker.gitEnabledimage: buildpack-deps:stretch-scm
      docker.repoVolumeName: repo_$(docker.baseArtifactName)
      docker.setupContainerName: setup_$(docker.baseArtifactName)
      imageBuilder.customArgs: --var VersionFilter=$(buildPath) --var ArchitectureFilter=arm
      imageBuilder.image: ${{ parameters.imageBuilderImage }}
      manifest: ${{ parameters.manifest }}
    steps:
      - template: ../steps/docker-cleanup-windows.yml
      - script: docker pull $(imageBuilder.image)
        displayName: Pull Image Builder
      - script: docker create $(docker.certVolumeArg) --name $(docker.setupContainerName) $(imageBuilder.image)
        displayName: Create Setup Container
      - script: docker cp c:/docker-certs $(docker.setupContainerName):/
        displayName: Copy Docker Certs
      - script: docker rm -f $(docker.setupContainerName)
        displayName: Cleanup container
        continueOnError: true
      - script: docker run $(docker.commonRunArgs) --name clone_$(docker.baseArtifactName) $(docker.gitEnabledimage) git clone https://github.com/dotnet/dotnet-docker.git /repo
        displayName: Clone Repo
      - script: docker run $(docker.commonRunArgs) --name checkout_$(docker.baseArtifactName) $(docker.gitEnabledimage) git checkout $(Build.SourceVersion)
        displayName: Checkout Source
      - script: docker run $(docker.commonRunArgs) --name image_builder_$(docker.baseArtifactName) $(imageBuilder.image) build --manifest $(manifest) --path $(buildPath) --architecture arm --skip-test --push --username $(dockerRegistry.userName) --password $(BotAccount-dotnet-dockerhub-bot-password) $(imageBuilder.customArgs) $(imageBuilder.queueArgs)
        displayName: Build Images
      - script: docker run $(docker.commonRunArgs) --name cleanup_$(docker.baseArtifactName) --entrypoint docker $(imageBuilder.image) system prune -a -f
        displayName: Cleanup ARM Docker
        condition: always()
        continueOnError: true
      - template: ../steps/docker-cleanup-windows.yml
