ARG sdk_image
ARG runtime_image
ARG runtime_deps_image


FROM $sdk_image as build

ARG rid
ARG NuGetFeedPassword
ARG port

EXPOSE $port

WORKDIR /source
COPY NuGet.config .
WORKDIR /source/app
COPY app/*.csproj .
RUN dotnet restore -r $rid

COPY app/ .
RUN dotnet build --no-restore


FROM $sdk_image as blazorwasm_build

ARG rid
ARG NuGetFeedPassword
ARG port

EXPOSE $port

WORKDIR /source
COPY NuGet.config .

RUN dotnet workload install --configfile NuGet.config --skip-manifest-update wasm-tools \
    && . /etc/os-release \
    && case $ID in \
        alpine) apk add --no-cache python3 ;; \
        debian | ubuntu) apt-get update \
            && apt-get install -y --no-install-recommends python3 \
            && rm -rf /var/lib/apt/lists/* ;; \
        mariner) tdnf install -y python3 \
            && tdnf clean all ;; \
    esac

WORKDIR /source/app
COPY app/*.csproj .
RUN dotnet restore -r $rid

COPY app/ .
RUN dotnet build --no-restore


FROM blazorwasm_build as blazorwasm_publish

ARG rid
RUN dotnet publish -r $rid -c Release --self-contained true -o out


FROM build AS test

ARG rid
ARG NuGetFeedPassword

WORKDIR /source/tests

COPY tests/*.csproj .
RUN dotnet restore -r $rid

COPY tests/ .
ENTRYPOINT ["dotnet", "test", "--logger:trx", "--no-restore"]


FROM build as publish_fx_dependent
RUN dotnet publish --no-restore -c Release -o out


FROM $runtime_image AS fx_dependent_app

ARG port

EXPOSE $port
WORKDIR /app
COPY --from=publish_fx_dependent /source/app/out ./
ENTRYPOINT ["dotnet", "app.dll"]


FROM build as publish_self_contained
ARG rid
RUN dotnet publish -r $rid -c Release --self-contained true -o out


FROM $runtime_deps_image AS self_contained_app

ARG port

EXPOSE $port
WORKDIR /app
COPY --from=publish_self_contained /source/app/out ./
ENTRYPOINT ["./app"]


FROM build as publish_aot

RUN dotnet publish -r $rid --no-restore -o /app


FROM $runtime_deps_image AS aot_app

WORKDIR /app
COPY --from=publish_aot /app .
USER $APP_UID
ENTRYPOINT ["./app"]
