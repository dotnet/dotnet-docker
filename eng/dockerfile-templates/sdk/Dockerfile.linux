{{
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isMariner to find(OS_VERSION, "cbl-mariner") >= 0 ^
    set isFullMariner to defined(match(OS_VERSION, "^cbl-mariner\d+\.\d+$")) ^
    set baseUrl to VARIABLES[cat("base-url|", dotnetVersion, "|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "msrc") >= 0 || find(baseUrl, "internal") >= 0 ^
    set isBasedOnBuildpackDeps to (dotnetVersion = "3.1" && !(isAlpine || isMariner)) ^
    set archTagSuffix to when(dotnetVersion != "3.1", ARCH_TAG_SUFFIX, "") ^
    set baseImageTag to when(isBasedOnBuildpackDeps,
        cat(ARCH_VERSIONED, "/buildpack-deps:", OS_VERSION_BASE, "-scm"),
        cat("$REPO:", VARIABLES[cat("dotnet|", dotnetVersion, "|product-version")], "-", OS_VERSION, archTagSuffix)) ^
    set internalInstallerBase to when(isAlpine || isMariner,
        baseImageTag,
        cat(ARCH_VERSIONED, "/buildpack-deps:", OS_VERSION_BASE, "-curl")) ^
    set pkgs to filter(when(isAlpine,
        [
            "curl",
            "icu-libs",
            "git"
        ],
        when(isMariner,
            [
                "git",
                when(dotnetVersion = "3.1" || dotnetVersion = "5.0", "procps-ng", "")
            ],
            [
                "curl",
                "git",
                when(dotnetVersion = "3.1" || dotnetVersion = "5.0", "procps", "")
                "wget"
            ])), len)
}}{{if !isBasedOnBuildpackDeps:ARG REPO=mcr.microsoft.com/dotnet/aspnet
}}{{if isInternal:# Installer image
FROM {{internalInstallerBase}} AS installer

ARG SAS_QUERY_STRING

{{InsertTemplate("Dockerfile.linux.install-sdk",
    [
        "install-method": when(isFullMariner, "download", "download-and-install"),
        "based-on-buildpack-deps": "true",
        "use-local-version-var": (dotnetVersion = "3.1"),
        "is-internal": isInternal,
        "url-suffix": "$SAS_QUERY_STRING"
    ])}}


# .NET SDK image
}}FROM {{baseImageTag}}

{{InsertTemplate("Dockerfile.envs", ["based-on-buildpack-deps": isBasedOnBuildpackDeps])}}
{{if isAlpine && dotnetVersion = "3.1":
# Add dependencies for disabling invariant mode (set in base image)
RUN apk add --no-cache icu-libs
}}{{if dotnetVersion != "3.1":
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
[
    "pkgs": pkgs
])}}
}}{{if isBasedOnBuildpackDeps:
# Install .NET CLI dependencies
RUN {{InsertTemplate("../Dockerfile.linux.install-deps", ["isSdk": "true"])}}
}}
{{if isInternal:{{
if isFullMariner:{{InsertTemplate("Dockerfile.linux.install-sdk",
    [
        "install-method": "copy-and-install",
        "is-internal": isInternal,
        "url-suffix": "$SAS_QUERY_STRING",
        "installer-stage": "installer"
    ])}}^
else:COPY --from=installer ["/usr/share/dotnet", "/usr/share/dotnet"]

{{InsertTemplate("Dockerfile.linux.first-run")}}}}^
else:{{InsertTemplate("Dockerfile.linux.install-sdk",
    [
        "install-method": "download-and-install",
        "based-on-buildpack-deps": isBasedOnBuildpackDeps,
        "use-local-version-var": (dotnetVersion = "3.1")
    ])}}}}{{if !isAlpine || ARCH_SHORT = "x64":

{{InsertTemplate("Dockerfile.linux.install-powershell")}}}}
