{{
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isMariner to find(OS_VERSION, "cbl-mariner") >= 0 ^
    set isAzureLinux to isMariner || find(OS_VERSION, "azurelinux") >= 0 ^
    set baseUrl to VARIABLES[cat("dotnet|", dotnetVersion, "|base-url|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "dotnetstage") >= 0 ^
    set tagVersion to VARIABLES[cat("dotnet|", dotnetVersion, "|fixed-tag")] ^
    set baseImageTag to cat("$REPO:", tagVersion, "-", OS_VERSION, ARCH_TAG_SUFFIX) ^

    _ Workaround for https://bugs.launchpad.net/ubuntu/+source/tar/+bug/2059734. Remove when fixed. ^
    set useJammyArm32Workaround to (OS_VERSION_BASE = "noble" || OS_VERSION_BASE = "trixie") && ARCH_SHORT = "arm" ^
    set osVersionBase to
        when(useJammyArm32Workaround,
            when(OS_VERSION_BASE = "noble",
                "jammy",
                "bookworm"),
            OS_VERSION_BASE) ^

    set internalInstallerBase to when(isAlpine || isAzureLinux,
        baseImageTag,
        cat(ARCH_VERSIONED, "/buildpack-deps:", osVersionBase, "-curl")) ^

    set isPowerShellSupported to !(isAlpine && ARCH_SHORT != "x64") ^
    set includePowerShellVars to isPowerShellSupported || dotnetVersion = "8.0" || dotnetVersion = "9.0" ^

    set pkgs to filter(
        when(isAlpine,
            when(dotnetVersion = "8.0",
            [
                "curl",
                "git",
                "icu-data-full",
                "icu-libs",
                "tzdata",
            ],
            [
                "curl",
                "git",
                "icu-data-full",
                "icu-libs",
                "libatomic",
                "tzdata",
            ]),
        when(isAzureLinux,
            when (isMariner,
                [
                    "git",
                    "libatomic_ops",
                    "tar",
                ],
                [
                    "git",
                    "libgcc-atomic",
                    "tar",
                ]),
            [
                "curl",
                "git",
                "libatomic1",
                "wget",
            ]
        )), len) ^

    set sdkExtractPaths to [
        "./packs",
        "./sdk",
        "./sdk-manifests",
        "./templates",
        "./LICENSE.txt",
        "./ThirdPartyNotices.txt"
    ]

}}ARG REPO=mcr.microsoft.com/dotnet/aspnet
# Installer image
FROM {{internalInstallerBase}} AS installer{{if isInternal:

ARG ACCESSTOKEN}}
{{if isAzureLinux:
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["tar"]
    ])}}
}}
# Install .NET SDK
RUN {{InsertTemplate("../Dockerfile.download-dotnet", [
    "product": "sdk",
    "extract-to": "/dotnet",
    "extract-paths": sdkExtractPaths
], "    ")}}


# .NET SDK image
FROM {{baseImageTag}}

{{InsertTemplate("Dockerfile.envs", ["is-internal": isInternal, "include-powershell-vars": includePowerShellVars])}}

RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
[
    "pkgs": pkgs
])}}

COPY --from=installer ["/dotnet", "/usr/share/dotnet"]

{{InsertTemplate("Dockerfile.linux.first-run")}}{{if isPowerShellSupported:

{{InsertTemplate("Dockerfile.linux.install-powershell")}}}}
