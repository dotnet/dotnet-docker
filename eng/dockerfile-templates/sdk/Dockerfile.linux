{{
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isMariner to find(OS_VERSION, "cbl-mariner") >= 0 ^
    set isAzureLinux to isMariner || find(OS_VERSION, "azurelinux") >= 0 ^
    set isFullAzureLinux to defined(match(OS_VERSION, "^cbl-mariner\d+\.\d+$")) ^
    set baseUrl to VARIABLES[cat("base-url|", dotnetVersion, "|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "msrc") >= 0 || find(baseUrl, "internal") >= 0 ^
    set isRpmInstall to isFullAzureLinux && dotnetVersion = "6.0" ^
    set tagVersion to when(dotnetVersion = "6.0" || dotnetVersion = "8.0",
        VARIABLES[cat("dotnet|", dotnetVersion, "|product-version")]
        VARIABLES[cat("dotnet|", dotnetVersion, "|fixed-tag")]) ^
    set baseImageTag to cat("$REPO:", tagVersion, "-", OS_VERSION, ARCH_TAG_SUFFIX) ^

    _ Workaround for https://bugs.launchpad.net/ubuntu/+source/tar/+bug/2059734. Remove when fixed. ^
    set useNobleArm32Workaround to OS_VERSION_BASE = "noble" && ARCH_SHORT = "arm" ^
    set osVersionBase to when(useNobleArm32Workaround, "jammy", OS_VERSION_BASE) ^

    set internalInstallerBase to when(isAlpine || isAzureLinux,
        baseImageTag,
        cat(ARCH_VERSIONED, "/buildpack-deps:", osVersionBase, "-curl")) ^
    set pkgs to filter(when(isAlpine,
        when (dotnetVersion = "6.0",
            [
                "curl",
                "git",
                "icu-data-full",
                "icu-libs",
            ],
            when (dotnetVersion = "8.0",
                [
                    "curl",
                    "git",
                    "icu-data-full",
                    "icu-libs",
                    "tzdata",
                ],
                [
                    "curl",
                    "git",
                    "icu-data-full",
                    "icu-libs",
                    "libatomic",
                    "tzdata",
                ])),
        when(isAzureLinux,
            when (isMariner,
                when (dotnetVersion = "6.0",
                    [
                        "git",
                        "tar",
                    ],
                    [
                        "git",
                        "libatomic_ops",
                        "tar",
                    ]
                ),
                [
                    "git",
                    "libgcc-atomic",
                    "tar",
                ]),
            when (dotnetVersion = "6.0",
                [
                    "curl",
                    "git",
                    "wget",
                ],
                [
                    "curl",
                    "git",
                    "libatomic1",
                    "wget",
                ]
            ))), len)
}}ARG REPO=mcr.microsoft.com/dotnet/aspnet
{{if isInternal || useNobleArm32Workaround:# Installer image
FROM {{internalInstallerBase}} AS installer{{if isInternal:

ARG SAS_QUERY_STRING}}
{{if isFullAzureLinux && !isRpmInstall:
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["tar"]
    ])}}
}}
{{InsertTemplate("Dockerfile.linux.install-sdk",
    [
        "install-method": when(isRpmInstall, "download", "download-and-install"),
        "is-internal": isInternal,
        "url-suffix": when(isInternal, "$SAS_QUERY_STRING", ""),
        "is-rpm-install": isRpmInstall,
        "disable-first-run-experience": useNobleArm32Workaround,
        "no-version-env-var": useNobleArm32Workaround
    ])}}


# .NET SDK image
}}FROM {{baseImageTag}}

{{InsertTemplate("Dockerfile.envs")}}

RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
[
    "pkgs": pkgs
])}}

{{if isInternal || useNobleArm32Workaround:{{
if isRpmInstall:{{InsertTemplate("Dockerfile.linux.install-sdk",
    [
        "install-method": "copy-and-install",
        "is-internal": isInternal,
        "url-suffix": "$SAS_QUERY_STRING",
        "installer-stage": "installer",
        "is-rpm-install": isRpmInstall
    ])}}^
else:COPY --from=installer ["/usr/share/dotnet", "/usr/share/dotnet"]

{{InsertTemplate("Dockerfile.linux.first-run")}}}}^
else:{{InsertTemplate("Dockerfile.linux.install-sdk",
    [
        "install-method": "download-and-install",
        "is-rpm-install": isRpmInstall
    ])}}}}{{if !(isAlpine && ARCH_SHORT != "x64"):

{{InsertTemplate("Dockerfile.linux.install-powershell")}}}}
