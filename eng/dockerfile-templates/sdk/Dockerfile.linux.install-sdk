{{
    _ ARGS
        install-method: Method of installation. Can be "download", "download-and-install", or "copy-and-install"
        use-local-version-var: Whether to define a local variable for the .NET SDK version instead of
            referencing the environment variable.
        is-internal (optional): Whether the Dockerfile is targeting an internal build of the product.
        installer-stage (optional): Name of the Dockerfile stage responsible for installation

        Workaround for https://bugs.launchpad.net/ubuntu/+source/tar/+bug/2059734. Remove when fixed.
        disable-first-run-experience (optional): Force skipping the first-run experience regardless of other conditions
        no-version-env-var (optional): Force reading the from the versions file instead of using DOTNET_SDK_VERSION env var ^

    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set buildVersion to VARIABLES[cat("sdk|", dotnetVersion, "|build-version")] ^
    set productVersion to VARIABLES[cat("sdk|", dotnetVersion, "|product-version")] ^

    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isFullAzureLinux to defined(match(OS_VERSION, "^cbl-mariner\d+\.\d+$")) || defined(match(OS_VERSION, "^azurelinux\d+\.\d+$")) ^
    set platform to when(isAlpine, "linux-musl", "linux") ^
    set installDir to "/dotnet" ^

    set versionDir to
        when(ARGS["no-version-env-var"],
            buildVersion,
        when(ARGS["use-local-version-var"],
            "$sdk_version",
            "$DOTNET_SDK_VERSION")) ^

    set isStableBranding to find(buildVersion, "-servicing") >= 0 || find(buildVersion, "-rtm") >= 0 ^
    set fileVersion to when(isStableBranding, productVersion, versionDir) ^

    if (ARGS["is-internal"]):{{
        set versionDir to buildVersion ^
        set fileVersion to productVersion
    }} ^

    set baseUrl to VARIABLES[cat("dotnet|", dotnetVersion, "|base-url|", VARIABLES["branch"])] ^
    set downloadUrl to cat(baseUrl, "/Sdk/", versionDir, "/dotnet-sdk-", fileVersion, "-", platform, "-", ARCH_SHORT, ".tar.gz") ^
    set sha to VARIABLES[join(["sdk", dotnetVersion, platform, ARCH_SHORT, "sha"], "|")] ^

    set files to [
        [
            "filename": "dotnet.tar.gz",
            "url": downloadUrl,
            "sha": sha,
            "sha-var-name": "dotnet_sha512",
            "extract-paths": [
                "./packs",
                "./sdk",
                "./sdk-manifests",
                "./templates",
                "./LICENSE.txt",
                "./ThirdPartyNotices.txt"
            ]
        ]
    ] ^
    set copyEnabled to ARGS["install-method"] = "copy-and-install" ^
    set downloadEnabled to ARGS["install-method"] = "download" || ARGS["install-method"] = "download-and-install" ^
    set installEnabled to ARGS["install-method"] = "download-and-install" || ARGS["install-method"] = "copy-and-install"
}}{{
if copyEnabled:{{InsertTemplate("../Dockerfile.linux.copy-files",
    [
        "files": files,
        "srcStage": ARGS["installer-stage"],
        "destination": ""
    ])
}}
}}# Install .NET SDK
RUN {{if ARGS["use-local-version-var"]:sdk_version={{VARIABLES[cat("sdk|", dotnetVersion, "|build-version")]}} \
{{
if isFullAzureLinux:    dotnet_version={{VARIABLES[cat("runtime|", dotnetVersion, "|build-version")]}} \
    aspnet_version={{VARIABLES[cat("aspnet|", dotnetVersion, "|build-version")]}} \
}}}}{{if ARGS["use-local-version-var"]:    && }}{{InsertTemplate("../Dockerfile.linux.download-and-install",
    [
        "files": files,
        "skip-download": !downloadEnabled,
        "skip-install": !installEnabled,
        "install-dir": installDir,
        "create-install-dir": "true"
    ], "    ")}}{{if !ARGS["disable-first-run-experience"] && !ARGS["is-internal"]: \
    {{InsertTemplate("Dockerfile.linux.first-run", ["append-cmd": "true"], "    ")}}}}
