{{

    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set buildVersion to VARIABLES[cat("sdk|", dotnetVersion, "|build-version")] ^
    set productVersion to VARIABLES[cat("sdk|", dotnetVersion, "|product-version")] ^

    set sdkExtractPaths to [
        "./packs",
        "./sdk",
        "./sdk-manifests",
        "./templates",
        "./LICENSE.txt",
        "./ThirdPartyNotices.txt"
    ]^
    if (dotnetVersion != "8.0" && dotnetVersion != "9.0"):{{
        set sdkExtractPaths to cat(["./dnx"], sdkExtractPaths)
    }}^

    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set platform to when(isAlpine, "linux-musl", "linux") ^

    set isStableBranding to find(buildVersion, "-servicing") >= 0 || find(buildVersion, "-rtm") >= 0 ^

    _ For preview (non-stable) versions, the full build version is always in the file name. ^
    set fileVersion to when(isStableBranding, productVersion, buildVersion) ^
    set versionDir to buildVersion ^

    set baseUrl to VARIABLES[cat("dotnet|", dotnetVersion, "|base-url|", VARIABLES["branch"])] ^
    set downloadUrl to cat(baseUrl, "/Sdk/", versionDir, "/dotnet-sdk-", fileVersion, "-", platform, "-", ARCH_SHORT, ".tar.gz") ^
    set sha to VARIABLES[join(["sdk", dotnetVersion, platform, ARCH_SHORT, "sha"], "|")]

}}# Install .NET SDK
RUN {{InsertTemplate("../Dockerfile.linux.download-dotnet", [
        "download-url": downloadUrl,
        "out-file": "dotnet.tar.gz",
        "extract-to": "/dotnet",
        "extract-paths": sdkExtractPaths,
        "sha-var-name": "dotnet_sha512",
        "sha": sha
    ], "    ")}}
