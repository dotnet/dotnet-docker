{{
    _ ARGS
        install-method: Method of installation. Can be "download", "download-and-install", or "copy-and-install"
        use-local-version-var: Whether to define a local variable for the .NET SDK version instead of
            referencing the environment variable.
        is-internal (optional): Whether the Dockerfile is targeting an internal build of the product.
        url-suffix (optional): Suffix string to append the end of the URL.
        installer-stage (optional): Name of the Dockerfile stage responsible for installation
        is-rpm-install (optional): Whether to install RPM versus tarball ^

    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isFullMariner to defined(match(OS_VERSION, "^cbl-mariner\d+\.\d+$")) ^
    set platform to when(isAlpine, "linux-musl", "linux") ^
    set installDir to "/usr/share/dotnet" ^
    set url to cat(
        VARIABLES[cat("base-url|", dotnetVersion, "|", VARIABLES["branch"])],
        "/Sdk/$dotnet_sdk_version/dotnet-sdk-$dotnet_sdk_version-", platform, "-", ARCH_SHORT, ".tar.gz") ^
    set sdkVersionDir to when(ARGS["use-local-version-var"],
        "$sdk_version",
        when(ARGS["is-internal"],
            VARIABLES[cat("sdk|", dotnetVersion, "|build-version")]
            "$DOTNET_SDK_VERSION")) ^
    set isInternalStableBranding to ARGS["is-internal"] &&
        (find(VARIABLES[cat("sdk|", dotnetVersion, "|build-version")], "-servicing") >= 0 ||
        find(VARIABLES[cat("sdk|", dotnetVersion, "|build-version")], "-rtm") >= 0) ^
    set sdkVersionFile to when(isInternalStableBranding,
        VARIABLES[cat("sdk|", dotnetVersion, "|product-version")],
        sdkVersionDir) ^
    set runtimeVersionDir to when(ARGS["use-local-version-var"], "$dotnet_version", "$DOTNET_VERSION") ^
    set runtimeVersionFile to when(isInternalStableBranding,
        VARIABLES[cat("dotnet|", dotnetVersion, "|product-version")],
        runtimeVersionDir) ^
    set runtimeTargetingPackVersionFile to when(isInternalStableBranding,
        split(VARIABLES[cat("runtime|", dotnetVersion, "|targeting-pack-version")], "-")[0],
        VARIABLES[cat("runtime|", dotnetVersion, "|targeting-pack-version")]) ^
    set aspnetTargetingPackVersionFile to when(isInternalStableBranding,
        split(VARIABLES[cat("aspnet|", dotnetVersion, "|targeting-pack-version")], "-")[0],
        VARIABLES[cat("aspnet|", dotnetVersion, "|targeting-pack-version")]) ^
    set baseUrl to VARIABLES[cat("base-url|", dotnetVersion, "|", VARIABLES["branch"])] ^
    set commonShaVarName to "dotnet_sha512" ^
    set rpmFileArch to when(ARCH_SHORT = "arm64", "aarch64", ARCH_SHORT) ^
    set rpms to [
        [
            "filename": "dotnet.rpm",
            "url": cat(baseUrl, "/Sdk/", sdkVersionDir, "/dotnet-sdk-", sdkVersionFile, "-", rpmFileArch, ".rpm",
                ARGS["url-suffix"]),
            "sha": VARIABLES[join(["sdk", dotnetVersion, "linux-rpm", ARCH_SHORT, "sha"], "|")],
            "sha-var-name": commonShaVarName
        ],
        [
            "filename": "apphost.rpm",
            "url": cat(baseUrl, "/Runtime/", runtimeVersionDir, "/dotnet-apphost-pack-", runtimeVersionFile, "-",
                rpmFileArch, ".rpm", ARGS["url-suffix"]),
            "sha": VARIABLES[join(["runtime-apphost-pack", dotnetVersion, "linux-rpm", ARCH_SHORT, "sha"], "|")],
            "sha-var-name": commonShaVarName
        ],
        [
            "filename": "targeting-pack.rpm",
            "url": cat(baseUrl, "/Runtime/", VARIABLES[cat("runtime|", dotnetVersion, "|targeting-pack-version")],
                "/dotnet-targeting-pack-", runtimeTargetingPackVersionFile,
                "-", rpmFileArch, ".rpm", ARGS["url-suffix"]),
            "sha": VARIABLES[join(["runtime-targeting-pack", dotnetVersion, "linux-rpm", ARCH_SHORT, "sha"], "|")],
            "sha-var-name": commonShaVarName
        ],
        [
            "filename": "aspnetcore-targeting-pack.rpm",
            "url": cat(baseUrl, "/aspnetcore/Runtime/", VARIABLES[cat("aspnet|", dotnetVersion, "|targeting-pack-version")],
                "/aspnetcore-targeting-pack-", aspnetTargetingPackVersionFile, "-", rpmFileArch, ".rpm", ARGS["url-suffix"]),
            "sha": VARIABLES[join(["aspnet-runtime-targeting-pack", dotnetVersion, "linux-rpm", ARCH_SHORT, "sha"], "|")],
            "sha-var-name": commonShaVarName
        ]
    ] ^
    set rpms to when(ARCH_SHORT != "arm64",
        cat(rpms, [[
            "filename": "netstandard-targeting-pack.rpm",
            "url": cat("https://dotnetcli.azureedge.net/dotnet/Runtime/3.1.0/netstandard-targeting-pack-2.1.0-", ARCH_SHORT, ".rpm"),
            "sha": VARIABLES[join(["netstandard-targeting-pack-2.1.0", "linux-rpm", ARCH_SHORT, "sha"], "|")],
            "sha-var-name": commonShaVarName
        ]]),
        rpms) ^
    set tarballs to [
        [
            "filename": "dotnet.tar.gz",
            "url": cat(baseUrl, "/Sdk/", sdkVersionDir, "/dotnet-sdk-", sdkVersionFile, "-", platform, "-", ARCH_SHORT, ".tar.gz",
                ARGS["url-suffix"]),
            "sha": VARIABLES[join(["sdk", dotnetVersion, platform, ARCH_SHORT, "sha"], "|")],
            "sha-var-name": commonShaVarName,
            "extract-paths": [
                "./packs",
                "./sdk",
                "./sdk-manifests",
                "./templates",
                "./LICENSE.txt",
                "./ThirdPartyNotices.txt"
            ]
        ]
    ] ^
    set files to when(ARGS["is-rpm-install"], rpms, tarballs) ^
    set copyEnabled to ARGS["install-method"] = "copy-and-install" ^
    set downloadEnabled to ARGS["install-method"] = "download" || ARGS["install-method"] = "download-and-install" ^
    set installEnabled to ARGS["install-method"] = "download-and-install" || ARGS["install-method"] = "copy-and-install"
}}{{
if copyEnabled:{{InsertTemplate("../Dockerfile.linux.copy-files",
    [
        "files": files,
        "srcStage": ARGS["installer-stage"],
        "destination": ""
    ])
}}
}}# Install .NET SDK
RUN {{if ARGS["use-local-version-var"]:sdk_version={{VARIABLES[cat("sdk|", dotnetVersion, "|build-version")]}} \
{{
if isFullMariner:    dotnet_version={{VARIABLES[cat("runtime|", dotnetVersion, "|build-version")]}} \
    aspnet_version={{VARIABLES[cat("aspnet|", dotnetVersion, "|build-version")]}} \
}}}}{{if ARGS["use-local-version-var"]:    && }}{{InsertTemplate("../Dockerfile.linux.download-and-install",
    [
        "files": files,
        "skip-download": !downloadEnabled,
        "skip-install": !installEnabled,
        "install-dir": installDir,
        "create-install-dir": !isFullMariner
    ], "    ")}}{{if !ARGS["is-internal"] || (ARGS["is-rpm-install"] && installEnabled): \
    {{InsertTemplate("Dockerfile.linux.first-run", ["append-cmd": "true"], "    ")}}}}
