{{
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isFullMariner to defined(match(OS_VERSION, "^cbl-mariner\d+\.\d+$")) ^
    set isDistrolessMariner to defined(match(OS_VERSION, "^cbl-mariner\d+\.\d+-distroless$")) ^
    set baseUrl to VARIABLES[cat("base-url|", dotnetVersion, "|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "msrc") >= 0 || find(baseUrl, "internal") >= 0 ^
    set isSingleStage to (dotnetVersion = "3.1" || isAlpine || isFullMariner) && !isInternal ^
    set archTagSuffix to when(dotnetVersion != "3.1" || ARCH_VERSIONED != "amd64", ARCH_TAG_SUFFIX, "") ^
    set runtimeDepsBaseTag to cat(
        "$REPO:", VARIABLES[cat("dotnet|", dotnetVersion, "|product-version")], "-", OS_VERSION, archTagSuffix) ^
    set installerImageTag to when(isDistrolessMariner,
        cat(
            "mcr.microsoft.com/cbl-mariner/base/core:",
            OS_VERSION_NUMBER),
        when(isAlpine || isFullMariner,
            runtimeDepsBaseTag,
            cat(ARCH_VERSIONED, "/buildpack-deps:", OS_VERSION_BASE, "-curl")))
}}ARG REPO=mcr.microsoft.com/dotnet/runtime-deps{{if isSingleStage:
{{

_ SINGLE STAGE

}}FROM {{runtimeDepsBaseTag}}
{{if isAlpine:
{{InsertTemplate("../Dockerfile.alpine.invariant-mode")}}
^elif dotnetVersion = "3.1" && !isFullMariner:
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["curl"]
    ])}}
}}{{ if isFullMariner && find(OS_VERSION, "1.0") < 0 && ARCH_SHORT = "arm64":
{{InsertTemplate("../Dockerfile.linux.distroless-mariner-installer-prereqs")}}
}}{{ if dotnetVersion != "3.1":
{{InsertTemplate("Dockerfile.envs")}}
}}
# Install .NET{{when(dotnetVersion = "3.1", " Core", "")}} Runtime
{{InsertTemplate("Dockerfile.linux.install-runtime",
    [
        "install-method": "download-and-install",
        "dest-dir": "/usr/share/dotnet",
        "add-symlink": !isFullMariner || ARCH_SHORT = "arm64",
        "use-local-version-var": dotnetVersion = "3.1"
    ])}}^
else:{{

_ MULTI STAGE

}}

# Installer image
FROM {{installerImageTag}} AS installer
{{if isInternal:
ARG SAS_QUERY_STRING
}}{{ if isDistrolessMariner:
{{InsertTemplate("../Dockerfile.linux.distroless-mariner-installer-prereqs")}}
}}
# Retrieve .NET Runtime
{{InsertTemplate("Dockerfile.linux.install-runtime",
    [
        "install-method": when(isInternal && isFullMariner, "download", "download-and-install"),
        "dest-dir": when(isDistrolessMariner, "/usr/share/dotnet", "/dotnet"),
        "use-local-version-var": "true",
        "is-internal": isInternal,
        "url-suffix": when(isInternal, "$SAS_QUERY_STRING", "")
    ])}}{{ if isDistrolessMariner:

RUN mkdir /dotnet-symlink \
    && ln -s /usr/share/dotnet/dotnet /dotnet-symlink/dotnet}}


# .NET runtime image
FROM {{runtimeDepsBaseTag}}

{{InsertTemplate("Dockerfile.envs")}}
{{ if isInternal && isFullMariner:
{{InsertTemplate("Dockerfile.linux.install-runtime",
    [
        "install-method": "copy-and-install",
        "dest-dir": when(isDistrolessMariner, "/usr/share/dotnet", "/dotnet"),
        "is-internal": isInternal,
        "url-suffix": when(isInternal, "$SAS_QUERY_STRING", ""),
        "installer-stage": "installer"
    ])}}}}{{ if isDistrolessMariner:
COPY --from=installer ["/usr/share/dotnet", "/usr/share/dotnet"]
COPY --from=installer ["/dotnet-symlink", "/usr/bin"]^
elif !(isInternal && isFullMariner):
COPY --from=installer ["/dotnet", "/usr/share/dotnet"]

RUN {{InsertTemplate("Dockerfile.linux.symlink")}}}}}}
