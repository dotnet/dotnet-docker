{{
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isServerCore to find(OS_VERSION, "windowsservercore") >= 0 ^
    set baseUrl to VARIABLES[cat("base-url|", dotnetVersion, "|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "msrc") >= 0 || find(baseUrl, "internal") >= 0 ^
    set isSingleStage to (find(OS_VERSION, "windowsservercore") >= 0 && !isInternal) ^
    set serverCoreBaseTag to cat("mcr.microsoft.com/windows/servercore:", OS_VERSION_NUMBER, "-amd64") ^
    set finalStageBaseRepo to when(isInternal && isServerCore, "servercore", "nanoserver")
}}# escape=`

{{if isSingleStage:{{

    _ SINGLE STAGE

}}FROM {{serverCoreBaseTag}}

{{InsertTemplate("../Dockerfile.common-dotnet-envs")}} `
    {{InsertTemplate("Dockerfile.envs", [], "    ")}}

# Install .NET Runtime
{{InsertTemplate("Dockerfile.windows.install-runtime")}}

{{InsertTemplate("Dockerfile.windows.set-path")}}^
else:{{

    _ MULTI STAGE
    
}}# Installer image
FROM {{serverCoreBaseTag}} AS installer
{{if isInternal:
ARG SAS_QUERY_STRING
}}
# Retrieve .NET{{when(dotnetVersion = "3.1", " Core", "")}} Runtime
{{InsertTemplate("Dockerfile.windows.install-runtime",
    [
        "use-local-version-var": "true",
        "url-suffix": when(isInternal, "$Env:SAS_QUERY_STRING", ""),
        "is-internal": isInternal
    ])}}


# Runtime image
FROM mcr.microsoft.com/windows/{{finalStageBaseRepo}}:{{OS_VERSION_NUMBER}}-amd64

{{InsertTemplate("../Dockerfile.common-dotnet-envs")}}{{if dotnetVersion != "3.1": `
    {{InsertTemplate("Dockerfile.envs", [], "    ")}}}}

# In order to set system PATH, ContainerAdministrator must be used
USER ContainerAdministrator
{{InsertTemplate("Dockerfile.windows.set-path")}}
USER ContainerUser

COPY --from=installer ["/dotnet", "/Program Files/dotnet"]}}
