{{
    _
    ARGS:
        product         : Product name, e.g. "dotnet", "aspnet", "sdk"
        extract-to      : Directory where .NET will be extracted
        extract-paths   : (optional) Paths within the .NET tarball to extract
        ^

    set product to ARGS["product"] ^

    set isWindows to find(OS_VERSION, "server") >= 0 ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^

    set templatePlatform to when(isWindows, "windows", "linux") ^
    set lineEnd to when(isWindows, "; `", " \") ^
    set lineContinue to when(isWindows, "`", "\") ^
    set continue to when(isWindows, "", "&& ") ^

    set useFileVariables to isWindows ^
    set useExtraLines to isWindows ^
    set extraLine to when(useExtraLines, cat("
", lineContinue), "") ^

    set platform to
        when(isAlpine,
            "linux-musl",
        when(isWindows,
            "win",
            "linux"))^

    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set productVersion to VARIABLES[cat("dotnet|", dotnetVersion, "|product-version")] ^
    set buildVersion to VARIABLES[cat(product, "|", dotnetVersion, "|build-version")] ^

    set baseUrl to VARIABLES[cat("dotnet|", dotnetVersion, "|base-url|", VARIABLES["branch"])] ^
    set checksumsBaseUrl to VARIABLES[cat("dotnet|", dotnetVersion, "|base-url|checksums|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "dotnetstage") >= 0 ^

    if (product = "runtime"):{{
        set downloadPath to cat("/Runtime/", buildVersion, "/dotnet-runtime-", buildVersion, "-", platform, "-", ARCH_SHORT, ".tar.gz")
    }}^elif (product = "aspnet"):{{
        set downloadPath to cat("/aspnetcore/Runtime/", buildVersion, "/aspnetcore-runtime-", buildVersion, "-", platform, "-", ARCH_SHORT, ".tar.gz")
    }}^elif (product = "aspnet-composite"):{{
        set downloadPath to cat("/aspnetcore/Runtime/", buildVersion, "/aspnetcore-runtime-composite-", buildVersion, "-", platform, "-", ARCH_SHORT, ".tar.gz")
    }}^elif (product = "sdk"):{{
        set downloadPath to cat("/Sdk/", buildVersion, "/dotnet-sdk-", buildVersion, "-", platform, "-", ARCH_SHORT, ".tar.gz")
    }}^
    set downloadUrl to cat(baseUrl, downloadPath) ^

    set versionVariable to
        when(product = "aspnet" || product = "aspnet-composite",
            "aspnetcore_version",
        when(product = "sdk",
            "dotnet_sdk_version",
            "dotnet_version")) ^
    set versionVariableRef to cat("$", versionVariable) ^
    set versionVariableValue to buildVersion ^
    set assignVersionVariable to when(isWindows,
        cat("$", versionVariable, " = ", versionVariableValue),
        cat(versionVariable, "=", versionVariableValue)) ^

    set shaFunction to "512" ^
    set urlParts to split(downloadUrl, "/") ^
    set fileName to urlParts[len(urlParts) - 1] ^

    set fileNameParts to split(fileName, ".") ^
    set fileExtension to fileNameParts[len(fileNameParts) - 1] ^

    _ For now the aggregate and bare checksum files are mutually exclusive, but
      in the future we expect .NET 10 to have non-aggregate, non-bare checksum
      files before the other .NET versions, so it's necessary to have a
      separate condition for bare checksum files. ^
    _ Aggregate checksum files are also not available for internal builds. ^
    set shaUrlIsAggregate to (!isInternal && (dotnetVersion = "8.0" || dotnetVersion = "9.0")) ^
    set shaUrlIsBare to (isInternal || dotnetVersion = "10.0") ^

    set shaUrlPath to when(shaUrlIsAggregate,
        VARIABLES[cat("dotnet|", dotnetVersion, "|aggregate-checksums")],
        cat(downloadPath, ".sha512")) ^
    set shaUrl to cat(checksumsBaseUrl, shaUrlPath) ^

    set shaUrlParts to split(shaUrl, "/") ^
    set shaFileName to shaUrlParts[len(shaUrlParts) - 1] ^

    _ Replace occurrences of versions with references to the version variable ^
    set downloadUrl to replace(downloadUrl, versionVariableValue, versionVariableRef) ^
    set shaUrl to replace(shaUrl, versionVariableValue, versionVariableRef) ^
    set shaFileName to replace(shaFileName, versionVariableValue, versionVariableRef) ^
    set fileName to replace(fileName, versionVariableValue, versionVariableRef) ^

    _ The .NET SDK has two versions associated with it - SDK version and Runtime version.
      Aggregate checksum files are associated with the .NET runtime version, so if we're
      installing the SDK we need to have a separate variable for the runtime version. ^
    if (product = "sdk" && shaUrlIsAggregate):{{
        set runtimeVersionVariable to "dotnet_version" ^
        set runtimeVersionVariableRef to cat("$", runtimeVersionVariable) ^
        set runtimeVersionVariableValue to VARIABLES[cat("runtime|", dotnetVersion, "|build-version")] ^

        set downloadUrl to replace(downloadUrl, runtimeVersionVariableValue, runtimeVersionVariableRef) ^
        set shaUrl to replace(shaUrl, runtimeVersionVariableValue, runtimeVersionVariableRef) ^
        set shaFileName to replace(shaFileName, runtimeVersionVariableValue, runtimeVersionVariableRef) ^
        set fileName to replace(fileName, runtimeVersionVariableValue, runtimeVersionVariableRef)
    }}^

    set assign(variable, value) to:{{
        if (isWindows):{{
            return cat("$", variable, " = \@"", value, "\@"")
        }}^else:{{
            return cat(variable, "=", value)
        }}^_
    }}^

    set filesToDownload to [
        ["url": downloadUrl],
        ["url": shaUrl]
    ]^

    if (useFileVariables):{{
        set fileVariable to when(product = "aspnet", "aspnetcore_file", "dotnet_file") ^
        set fileVariableRef to cat("$", fileVariable) ^
        set fileVariableValue to fileName ^
        set fileName to fileVariableRef ^

        set shaVariable to when(shaUrlIsAggregate, "dotnet_checksums_file", "dotnet_sha512_file") ^
        set shaVariableRef to cat("$", shaVariable) ^
        set shaVariableValue to shaFileName ^
        set shaFileName to shaVariableRef ^

        set downloadUrl to replace(downloadUrl, fileVariableValue, fileVariableRef) ^
        set shaUrl to replace(shaUrl, fileVariableValue, fileVariableRef) ^
        set shaUrl to replace(shaUrl, shaVariableValue, shaVariableRef) ^

        set filesToDownload to [
            ["out-file": fileName, "url": downloadUrl],
            ["out-file": shaFileName, "url": shaUrl]
        ]
    }}^

    set remove to when(isWindows, "Remove-Item -Force", "rm") ^
    set downloadFiles to cat("Dockerfile.", templatePlatform, ".download-files") ^
    set validateChecksum to cat("Dockerfile.", templatePlatform, ".validate-checksum") ^
    set extractFile to cat("Dockerfile.", templatePlatform, ".extract-file")

}}{{assign(versionVariable, versionVariableValue)}}{{if product = "sdk" && shaUrlIsAggregate:{{lineEnd}}
{{continue}}{{assign(runtimeVersionVariable, runtimeVersionVariableValue)}}}}{{if useFileVariables:{{lineEnd}}
{{continue}}{{assign(fileVariable, fileVariableValue)}}{{lineEnd}}
{{continue}}{{assign(shaVariable, shaVariableValue)}}}}{{lineEnd}}{{extraLine}}
{{continue}}{{InsertTemplate(downloadFiles, [
    "files": filesToDownload
])}}{{lineEnd}}{{extraLine}}
{{continue}}{{InsertTemplate(validateChecksum, [
    "file": fileName,
    "sha-function": shaFunction,
    "sha-file": shaFileName,
    "sha-file-is-bare": shaUrlIsBare,
    "sha-file-is-aggregate": shaUrlIsAggregate
])}}{{if ARGS["extract-to"]:{{lineEnd}}{{extraLine}}
{{continue}}mkdir {{if !isWindows:--parents }}{{ARGS["extract-to"]}}{{lineEnd}}
{{continue}}{{
    InsertTemplate(extractFile, [
        "file": fileName,
        "dest-dir": ARGS["extract-to"],
        "extract-paths": ARGS["extract-paths"]
    ])
}}}}{{lineEnd}}
{{continue}}{{remove}} {{lineContinue}}
    {{fileName}} {{lineContinue}}
    {{shaFileName}}
