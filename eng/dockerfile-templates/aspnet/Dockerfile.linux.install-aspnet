{{
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set productVersion to VARIABLES[cat("dotnet|", dotnetVersion, "|product-version")] ^
    set buildVersion to VARIABLES[cat("aspnet|", dotnetVersion, "|build-version")] ^

    set isFullAzureLinux to defined(match(OS_VERSION, "^cbl-mariner\d+\.\d+$")) ^
    set isDistroless to find(OS_VERSION, "distroless") >= 0 || find(OS_VERSION, "chiseled") >= 0 ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set platform to when(isAlpine, "linux-musl", "linux") ^

    set sdkBuildVersion to VARIABLES[cat("sdk|", dotnetVersion, "|build-version")] ^
    set isStableBranding to find(sdkBuildVersion, "-servicing") >= 0 || find(sdkBuildVersion, "-rtm") >= 0 ^

    _ Set versions explicitly, and dynamically replace them based on whether they match the env/local variables. ^
    _ For preview (non-stable) versions, the full build version is always in the file name. ^
    set fileVersion to when(isStableBranding, productVersion, buildVersion) ^
    set versionDir to buildVersion ^

    set versionVariable to "aspnetcore_version" ^

    set versionVariableValue to buildVersion ^
    if (versionDir = versionVariableValue):{{
        set versionDir to cat("$", versionVariable)
    }}^
    if (fileVersion = versionVariableValue):{{
        set fileVersion to cat("$", versionVariable)
    }}^

    set baseUrl to VARIABLES[cat("dotnet|", dotnetVersion, "|base-url|", VARIABLES["branch"])] ^
    set checksumsBaseUrl to VARIABLES[cat("dotnet|", dotnetVersion, "|base-url|checksums|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "dotnetstage") >= 0 ^

    set downloadUrlPath to cat("/aspnetcore/Runtime/", versionDir, "/aspnetcore-runtime-", fileVersion, "-", platform, "-", ARCH_SHORT, ".tar.gz") ^
    set downloadUrl to cat(baseUrl, downloadUrlPath) ^

    _ For now the aggregate and bare checksum files are mutually exclusive, but
      in the future we expect .NET 10 to have non-aggregate, non-bare checksum
      files before the other .NET versions, so it's necessary to have a
      separate condition for bare checksum files. ^
    _ Aggregate checksum files are also not available for internal builds. ^
    set shaUrlIsAggregate to (!isInternal && (dotnetVersion = "8.0" || dotnetVersion = "9.0")) ^
    set shaUrlIsBare to (isInternal || dotnetVersion = "10.0") ^

    set shaUrlPath to
        when(shaUrlIsAggregate,
            VARIABLES[cat("dotnet|", dotnetVersion, "|aggregate-checksums")],
            cat(downloadUrlPath, ".sha512")) ^
    set shaUrl to cat(checksumsBaseUrl, shaUrlPath)

}}RUN {{versionVariable}}={{versionVariableValue}} \
    && {{InsertTemplate("../Dockerfile.linux.download-dotnet", [
        "download-url": downloadUrl,
        "extract-to": "/dotnet",
        "extract-paths": ["./shared/Microsoft.AspNetCore.App"],
        "sha-url": shaUrl,
        "sha-url-is-bare": shaUrlIsBare,
        "sha-url-is-aggregate": shaUrlIsAggregate
    ], "    ")}}
