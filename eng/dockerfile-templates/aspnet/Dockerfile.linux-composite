{{
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isMariner to find(OS_VERSION, "mariner") >= 0 ^
    set isDistroless to find(OS_VERSION, "distroless") >= 0 || find(OS_VERSION, "chiseled") >= 0 ^
    set isFullMariner to isMariner && !isDistroless ^
    set isDistrolessMariner to isMariner && isDistroless ^
    set baseUrl to VARIABLES[cat("base-url|", dotnetVersion, "|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "msrc") >= 0 || find(baseUrl, "internal") >= 0 ^
    set isSingleStage to isAlpine && !isInternal ^
    set runtimeDepsVariant to when(ARGS["is-extra"], "-extra", "") ^
    set tagVersion to when(dotnetVersion = "6.0" || dotnetVersion = "7.0" || dotnetVersion = "8.0",
        VARIABLES[cat("dotnet|", dotnetVersion, "|product-version")]
        VARIABLES[cat("dotnet|", dotnetVersion, "|fixed-tag")]) ^
    set runtimeDepsBaseTag to
        cat("$REPO:", tagVersion, "-", OS_VERSION, runtimeDepsVariant, ARCH_TAG_SUFFIX) ^
    set osVersionBase to when(isDistroless, match(OS_VERSION, ".+(?=.*-)")[0], OS_VERSION_BASE) ^
    set installerImageTag to when(isDistrolessMariner,
        cat("mcr.microsoft.com/cbl-mariner/base/core:", OS_VERSION_NUMBER),
        when(isAlpine || isFullMariner,
            runtimeDepsBaseTag,
            cat(ARCH_VERSIONED, "/buildpack-deps:", osVersionBase, "-curl")))
}}ARG REPO=mcr.microsoft.com/dotnet/runtime-deps{{ if isSingleStage:
{{

    _ SINGLE STAGE

}}FROM {{runtimeDepsBaseTag}}
{{ if isAlpine:
{{InsertTemplate("../Dockerfile.alpine.invariant-mode")}}
}}
{{InsertTemplate("Dockerfile.envs", [ "is-composite-runtime": "true" ])}}

# Install ASP.NET Composite Runtime
{{InsertTemplate("../runtime/Dockerfile.linux.install-runtime",
    [
        "install-method": "download-and-install",
        "dest-dir": "/usr/share/dotnet",
        "add-symlink": "true",
        "is-composite-runtime": "true"
    ])}}^
else:{{

    _ MULTI STAGE

}}

# Installer image
FROM {{installerImageTag}} AS installer
{{ if isInternal:
ARG SAS_QUERY_STRING
}}{{ if isDistrolessMariner:
{{InsertTemplate("../Dockerfile.linux.distroless-mariner-installer-prereqs")}}
^elif isFullMariner:
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["tar"]
    ])}}
}}
# Retrieve ASP.NET Composite Runtime
{{InsertTemplate("../runtime/Dockerfile.linux.install-runtime",
    [
        "dest-dir": when(isDistroless, "/usr/share/dotnet", "/dotnet"),
        "install-method": "download-and-install",
        "use-local-version-var": "true",
        "is-internal": isInternal,
        "url-suffix": when(isInternal, "$SAS_QUERY_STRING", ""),
        "is-rpm-install": false
        "is-composite-runtime": "true",
    ])}}
{{ if isDistroless:
RUN mkdir /dotnet-symlink \
    && ln -s /usr/share/dotnet/dotnet /dotnet-symlink/dotnet
}}

# ASP.NET Composite Image
FROM {{runtimeDepsBaseTag}}

{{InsertTemplate("Dockerfile.envs", [ "is-composite-runtime": "true" ])}}{{ if isDistroless:
COPY --from=installer ["/usr/share/dotnet", "/usr/share/dotnet"]
COPY --from=installer ["/dotnet-symlink", "/usr/bin"]

ENTRYPOINT ["/usr/bin/dotnet"]
CMD ["--info"]^
else:
COPY --from=installer ["/dotnet", "/usr/share/dotnet"]
RUN {{InsertTemplate("../runtime/Dockerfile.linux.symlink")}}}}}}
