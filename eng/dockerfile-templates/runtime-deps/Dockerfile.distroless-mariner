{{
    set distrolessStagingDir to "/staging" ^
    set marinerRepo to "mcr.microsoft.com/cbl-mariner" ^
    set dotnetVersion to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set baseImage to cat(marinerRepo, "/distroless/minimal:", OS_VERSION_NUMBER) ^
    set username to "app" ^
    set uid to when(dotnetVersion = "6.0" || dotnetVersion = "7.0",
        when(find(OS_VERSION, "1.0") >= 0,
            1000,
            101),
        64198) ^
    set gid to uid ^
    set createUserHome to dotnetVersion != "6.0"
}}# Installer image
FROM {{marinerRepo}}/base/core:{{OS_VERSION_NUMBER}} AS installer
{{ if find(OS_VERSION, "1.0") >= 0:
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["dnf"]
    ])}}^else:
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["gawk", "shadow-utils"]
    ])}}}}

# Install .NET's dependencies into a staging location
RUN mkdir {{distrolessStagingDir}} \
    && {{InsertTemplate("../Dockerfile.linux.install-deps", ["distroless-staging-dir": distrolessStagingDir])}}
{{if find(OS_VERSION, "1.0") < 0:
# Generate RPM manifest file by appending to the original manifest file from base distroless image
COPY --from={{baseImage}} /var/lib/rpmmanifest/container-manifest-2 /tmp/rpmmanifest
RUN tmpManifestPath="/tmp/rpmmanifest" \
    && rpm --query --all --queryformat "%{NAME}\t%{VERSION}-%{RELEASE}\t%{INSTALLTIME}\t%{BUILDTIME}\t%{VENDOR}\t%{EPOCH}\t%{SIZE}\t%{ARCH}\t%{EPOCHNUM}\t%{SOURCERPM}\n" --root /staging | grep -v gpg-pubkey >> $tmpManifestPath \
    && mkdir -p /staging/var/lib/rpmmanifest \
    # Remove duplicates that match on the first field (package name)
    && tac $tmpManifestPath | gawk '!x[$1]++' | sort > /staging/var/lib/rpmmanifest/container-manifest-2

}}
# Create a non-root user and group
RUN {{InsertTemplate("Dockerfile.linux.distroless-user",
        [
            "staging-dir": distrolessStagingDir,
            "exclusive": dotnetVersion != "6.0",
            "name": username,
            "uid": uid,
            "gid": gid,
            "no-create-home": !createUserHome
        ])}}

# Clean up staging
RUN rm -rf {{distrolessStagingDir}}/etc/{{when(find(OS_VERSION, "1.0") >= 0, "dnf", "tdnf")}} \
    && rm -rf {{distrolessStagingDir}}/run/* \
    && rm -rf {{distrolessStagingDir}}/var/cache/{{when(find(OS_VERSION, "1.0") >= 0, "dnf", "tdnf")}} \
    && rm -rf {{distrolessStagingDir}}/var/lib/rpm \
    && rm -rf {{distrolessStagingDir}}/usr/share/doc \
    && rm -rf {{distrolessStagingDir}}/usr/share/man \
    && find {{distrolessStagingDir}}/var/log -type f -size +0 -delete


# .NET runtime-deps image
FROM {{baseImage}}

COPY --from=installer {{distrolessStagingDir}}/ /{{if createUserHome:

# Workaround for https://github.com/moby/moby/issues/38710
COPY --from=installer --chown={{uid}}:{{gid}} {{distrolessStagingDir}}/home/{{username}} /home/{{username}}}}

{{InsertTemplate("../Dockerfile.common-dotnet-envs", [
    "uid": uid
])}}

USER app
