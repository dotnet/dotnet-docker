{{
    _ ARGS:
        is-aot (optional): Whether to use the smallest set of packages that is necessary to run native AOT apps
        is-extra (optional): Whether to include extra packages that are not needed for every app,
            for example globalization support ^

    set isAzureLinux3 to find(OS_VERSION_NUMBER, "3.0") >= 0 ^
    set distrolessStagingDir to "/staging" ^
    set marinerRepo to when(isAzureLinux3, "mcr.microsoft.com/azurelinux", "mcr.microsoft.com/cbl-mariner") ^
    set baseImage to cat(marinerRepo, "/distroless/minimal:", OS_VERSION_NUMBER) ^
    set username to "app" ^
    set nonRootUser to when(isAzureLinux3, "$APP_UID", username) ^
    set uid to 1654 ^
    set gid to uid
}}# Installer image
FROM {{marinerRepo}}/base/core:{{OS_VERSION_NUMBER}} AS installer

RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["gawk", "shadow-utils"]
    ])}}

# Install .NET's dependencies into a staging location
RUN mkdir {{distrolessStagingDir}} \
    && {{InsertTemplate("../Dockerfile.linux.install-deps",
            [
                "is-aot": ARGS["is-aot"],
                "is-extra": ARGS["is-extra"],
                "staging-dir": distrolessStagingDir
            ]
        )}}

# Generate RPM manifest file by appending to the original manifest file from base distroless image
COPY --from={{baseImage}} /var/lib/rpmmanifest/container-manifest-2 /tmp/rpmmanifest
RUN tmpManifestPath="/tmp/rpmmanifest" \
    && rpm --query --all --queryformat "%{NAME}\t%{VERSION}-%{RELEASE}\t%{INSTALLTIME}\t%{BUILDTIME}\t%{VENDOR}\t%{EPOCH}\t%{SIZE}\t%{ARCH}\t%{EPOCHNUM}\t%{SOURCERPM}\n" --root /staging | grep -v gpg-pubkey >> $tmpManifestPath \
    && mkdir -p /staging/var/lib/rpmmanifest \
    # Remove duplicates that match on the first field (package name)
    && tac $tmpManifestPath | gawk '!x[$1]++' | sort > /staging/var/lib/rpmmanifest/container-manifest-2

# Create a non-root user and group
RUN {{InsertTemplate("Dockerfile.linux.non-root-user-staged",
        [
            "staging-dir": distrolessStagingDir,
            "exclusive": "true",
            "name": username,
            "uid": uid,
            "gid": gid
        ])}}

# Clean up staging
RUN rm -rf {{distrolessStagingDir}}/etc/tdnf \
    && rm -rf {{distrolessStagingDir}}/run/* \
    && rm -rf {{distrolessStagingDir}}/var/cache/tdnf \
    && rm -rf {{distrolessStagingDir}}/var/lib/rpm \
    && rm -rf {{distrolessStagingDir}}/usr/share/doc \
    && rm -rf {{distrolessStagingDir}}/usr/share/man \
    && find {{distrolessStagingDir}}/var/log -type f -size +0 -delete


# .NET runtime-deps image
FROM {{baseImage}}

{{InsertTemplate("../Dockerfile.common-dotnet-envs",
    [
        "uid": uid,
        "globalization-invariant": !ARGS["is-extra"]
    ]
)}}

COPY --from=installer {{distrolessStagingDir}}/ /

# Workaround for https://github.com/moby/moby/issues/38710
COPY --from=installer --chown={{uid}}:{{gid}} {{distrolessStagingDir}}/home/{{username}} /home/{{username}}

USER {{nonRootUser}}
