{{
    set aspireVersionParts to split(PRODUCT_VERSION, ".") ^
    set aspireMajorMinor to cat(aspireVersionParts[0], ".", aspireVersionParts[1]) ^

    set isAzureLinux to find(OS_VERSION, "mariner") >= 0 || find(OS_VERSION, "azurelinux") >= 0 ^
    set aspnetBaseTag to
        cat("$REPO:", VARIABLES[cat("dotnet|8.0|product-version")], "-", OS_VERSION, "-extra", ARCH_TAG_SUFFIX) ^
    set osVersionBase to match(OS_VERSION, ".+(?=.*-)")[0] ^
    set installerImageTag to when(isAzureLinux,
        cat("mcr.microsoft.com/",
            when(find(OS_VERSION, "3.0") >= 0, "azurelinux", "cbl-mariner"),
            "/base/core:",
            OS_VERSION_NUMBER),
        cat(ARCH_VERSIONED, "/buildpack-deps:", osVersionBase, "-curl")) ^

    set baseUrl to VARIABLES[cat("aspire-dashboard|", aspireMajorMinor, "|base-url|", VARIABLES["branch"])] ^
    set isInternal to find(baseUrl, "artifacts.visualstudio.com") >= 0
}}ARG REPO=mcr.microsoft.com/dotnet/aspnet

# Installer image
FROM {{installerImageTag}} AS installer{{if isInternal:
ARG ACCESSTOKEN}}
{{if isAzureLinux:
{{InsertTemplate("../Dockerfile.linux.distroless-azurelinux-installer-prereqs", [ "is-zip": "true" ])}}
}}
# Retrieve Aspire Dashboard
{{InsertTemplate("Dockerfile.linux.install-aspire-dashboard",
    [
        "is-zip": "true",
        "is-internal": isInternal
    ])}}


# Aspire Dashboard image
FROM {{aspnetBaseTag}}

WORKDIR /app
COPY --from=installer /app .

{{InsertTemplate("Dockerfile.envs")}}

ENTRYPOINT [ "dotnet", "/app/Aspire.Dashboard.dll" ]
