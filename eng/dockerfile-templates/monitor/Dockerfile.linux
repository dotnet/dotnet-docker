{{
    _ .NET major version matches the major version of dotnet-monitor ^
    set dotnetMajor to split(PRODUCT_VERSION, ".")[0] ^
    set dotnetMajorMinor to cat(dotnetMajor, ".0") ^
    set monitorMajor to split(PRODUCT_VERSION, ".")[0] ^
    set isAlpine to find(OS_VERSION, "alpine") >= 0 ^
    set isMariner to find(OS_VERSION, "mariner") >= 0 ^
    set isDistroless to find(OS_VERSION, "distroless") >= 0 || find(OS_VERSION, "chiseled") >= 0 ^
    set isFullMariner to isMariner && !isDistroless ^
    set isDistrolessMariner to isMariner && isDistroless ^
    set isSingleStage to !isDistroless ^
    set aspnetBaseTag to
        cat("$REPO:", VARIABLES[cat("dotnet|", dotnetMajorMinor, "|product-version")], "-", OS_VERSION, ARCH_TAG_SUFFIX) ^
    set osVersionBase to when(isDistroless, match(OS_VERSION, ".+(?=.*-)")[0], OS_VERSION_BASE) ^
    set installerImageTag to when(isDistrolessMariner,
        cat("mcr.microsoft.com/cbl-mariner/base/core:", OS_VERSION_NUMBER),
        when(isAlpine || isFullMariner,
            aspnetBaseTag,
            cat(ARCH_VERSIONED, "/buildpack-deps:", osVersionBase, "-curl")))
}}ARG REPO=mcr.microsoft.com/dotnet/aspnet{{if isSingleStage:
{{

    _ SINGLE STAGE

}}FROM {{aspnetBaseTag}}

{{InsertTemplate("Dockerfile.envs")}}

WORKDIR /app

# Install .NET Monitor
{{InsertTemplate("Dockerfile.linux.install-monitor")}}

{{InsertTemplate(cat("Dockerfile.entrypoint.monitorV", monitorMajor))}}^else:
{{

    _ MULTI STAGE

}}
# Installer image
FROM {{installerImageTag}} AS installer
{{if isDistrolessMariner:
{{InsertTemplate("../Dockerfile.linux.distroless-mariner-installer-prereqs")}}
^elif isFullMariner:
RUN {{InsertTemplate("../Dockerfile.linux.install-pkgs",
    [
        "pkgs": ["tar"]
    ])}}
}}
# Retrieve .NET Monitor
{{InsertTemplate("Dockerfile.linux.install-monitor")}}


# .NET Monitor image
FROM {{aspnetBaseTag}}

{{InsertTemplate("Dockerfile.envs")}}

WORKDIR /app
COPY --from=installer /app .

{{InsertTemplate(cat("Dockerfile.entrypoint.monitorV", monitorMajor))}}}}
