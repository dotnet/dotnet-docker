{{
    set monitorMajor to split(PRODUCT_VERSION, ".")[0] ^
    set monitorMajorMinor to join(slice(split(PRODUCT_VERSION, "."), 0, 2), ".") ^
    set isAzureLinux to find(OS_VERSION, "mariner") >= 0 || find(OS_VERSION, "azurelinux") >=0 ^
    set monitorBaseTagOs to when(isAzureLinux,
        cat(when(find(OS_VERSION, "3.0") >= 0, "azurelinux-distroless", "cbl-mariner-distroless")),
        "ubuntu-chiseled") ^
    set monitorBaseTagHasOs to monitorMajor = "8" ^
    set monitorBaseTagOsSuffix to when(monitorBaseTagHasOs, cat("-", monitorBaseTagOs), "") ^
    set monitorBaseTag to
        cat("$REPO:", VARIABLES[cat("monitor|", monitorMajorMinor, "|product-version")], monitorBaseTagOsSuffix, ARCH_TAG_SUFFIX) ^
    set osVersionBase to match(OS_VERSION, ".+(?=.*-)")[0] ^
    set installerImageTag to when(isAzureLinux,
        cat("mcr.microsoft.com/"
            when(find(OS_VERSION, "3.0") >= 0, "azurelinux", "cbl-mariner"),
            "/base/core:",
            OS_VERSION_NUMBER),
        cat(ARCH_VERSIONED, "/buildpack-deps:", osVersionBase, "-curl"))
}}ARG REPO=mcr.microsoft.com/dotnet/monitor/base

# Installer image
FROM {{installerImageTag}} AS installer
{{if isAzureLinux:
{{InsertTemplate("../Dockerfile.linux.distroless-azurelinux-installer-prereqs")}}
}}
# Retrieve .NET Monitor extensions
{{InsertTemplate("Dockerfile.linux.install-extensions")}}


# .NET Monitor image
FROM {{monitorBaseTag}}

COPY --from=installer ["/app", "/app"]
