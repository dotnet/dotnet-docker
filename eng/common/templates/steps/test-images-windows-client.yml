parameters:
  internalProjectName: null
  condition: true
  customInitSteps: []

steps:
- ${{ if and(eq(variables['System.TeamProject'], parameters.internalProjectName), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/steps/init-docker-windows.yml@self
    parameters:
      cleanupDocker: true
      setupImageBuilder: false
      condition: ${{ parameters.condition }}
  - template: /eng/common/templates/steps/run-pwsh-with-auth.yml@self
    parameters:
      displayName: Docker login
      serviceConnection: $(acr-staging.serviceConnectionName)
      dockerClientOS: windows
      condition: and(succeeded(), ${{ parameters.condition }})
      command: >
        az login --service-principal --tenant $env:tenantId -u $env:servicePrincipalId --federated-token $env:idToken;
        $accessToken = $(az acr login -n $(acr-staging.server) --expose-token --query accessToken --output tsv);
        docker login $(acr-staging.server) -u 00000000-0000-0000-0000-000000000000 -p $accessToken
- ${{ parameters.customInitSteps }}
- powershell: |
    if ("${{ variables['System.TeamProject'] }}" -eq "${{ parameters.internalProjectName }}" -and "${{ variables['Build.Reason'] }}" -ne "PullRequest") {
      $optionalTestArgs="$optionalTestArgs -PullImages -Registry ${env:ACR-STAGING_SERVER} -RepoPrefix $env:STAGINGREPOPREFIX -ImageInfoPath $(artifactsPath)/image-info.json"
    }
    if ($env:REPOTESTARGS) {
      $optionalTestArgs += " $env:REPOTESTARGS"
    }
    echo "##vso[task.setvariable variable=optionalTestArgs]$optionalTestArgs"
  displayName: Set Test Variables
  condition: and(succeeded(), ${{ parameters.condition }})
- powershell: Get-ChildItem -Path tests -r | Where {$_.Extension -match "trx"} | Remove-Item
  displayName: Cleanup Old Test Results
  condition: and(succeeded(), ${{ parameters.condition }})
- ${{ if and(eq(variables['System.TeamProject'], parameters.internalProjectName), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/steps/download-build-artifact.yml@self
    parameters:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: image-info
      condition: ${{ parameters.condition }}
- template: /eng/common/templates/steps/parse-test-arg-arrays.yml@self
- powershell: >
    $(test.init);
    $(testScriptPath)
    -Paths $(imageBuilderPathsArrayInitStr)
    -OSVersions $(osVersionsArrayInitStr)
    $(optionalTestArgs)
  displayName: Test Images
  condition: and(succeeded(), ${{ parameters.condition }})
- ${{ if and(eq(variables['System.TeamProject'], parameters.internalProjectName), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - script: docker logout $(acr-staging.server)
    displayName: Docker logout
    condition: and(always(), ${{ parameters.condition }})
    continueOnError: true
- task: PublishTestResults@2
  displayName: Publish Test Results
  condition: and(always(), ${{ parameters.condition }})
  continueOnError: true
  inputs:
    testRunner: vSTest
    testResultsFiles: '$(testResultsDirectory)/**/*.trx'
    mergeTestResults: true
    publishRunAttachments: true
    testRunTitle: $(productVersion) $(osVersionsDisplayName) amd64
