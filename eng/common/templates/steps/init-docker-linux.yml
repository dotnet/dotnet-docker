parameters:
  setupImageBuilder: true
  setupTestRunner: false
  cleanupDocker: false
  condition: true

steps:
- template: /eng/common/templates/steps/init-common.yml@self
  parameters:
    condition: ${{ parameters.condition }}
- script: echo "##vso[task.setvariable variable=artifactsPath]/artifacts"
  displayName: Define Artifacts Path Variable
  condition: and(succeeded(), ${{ parameters.condition }})

  ################################################################################
  # Cleanup Docker Resources
  ################################################################################
- ${{ if eq(parameters.cleanupDocker, 'true') }}:
  - template: /eng/common/templates/steps/cleanup-docker-linux.yml@self
    parameters:
      condition: ${{ parameters.condition }}

  ################################################################################
  # Setup Image Builder (Optional)
  ################################################################################
- ${{ if eq(parameters.setupImageBuilder, 'true') }}:
  - script: $(engCommonPath)/pull-image.sh $(imageNames.imageBuilder)
    displayName: Pull Image Builder
    condition: and(succeeded(), ${{ parameters.condition }})
  - script: >
      docker build
      -t $(imageNames.imageBuilder.withrepo)
      --build-arg IMAGE=$(imageNames.imageBuilder)
      -f $(engCommonPath)/Dockerfile.WithRepo .
    displayName: Build Image for Image Builder
    condition: and(succeeded(), ${{ parameters.condition }})
  - task: PowerShell@2
    displayName: Define ImageBuilder Command Variables
    condition: and(succeeded(), ${{ parameters.condition }})
    inputs:
      targetType: 'inline'
      script: |
        $tokenHostPath = '$(Agent.TempDirectory)'
        $tokenHostFilePath = "${tokenHostPath}/token"
        $tokenContainerPath = "/tmp"
        $tokenContainerFilePath = "${tokenContainerPath}/token"

        $dockerRunBaseCmd = @(
          "docker run --rm"
        )

        $dockerRunArgs = @(
          "-v /var/run/docker.sock:/var/run/docker.sock"
          "-v $(Build.ArtifactStagingDirectory):$(artifactsPath)"
          "-w /repo"
          "$(imageBuilderDockerRunExtraOptions)"
          "$(imageNames.imageBuilder.withrepo)"
        )

        $authedDockerRunArgs = @(
          '-e AZURE_TENANT_ID=$env:tenantId'
          '-e AZURE_CLIENT_ID=$env:servicePrincipalId'
          "-e AZURE_FEDERATED_TOKEN_FILE=$tokenContainerFilePath"
          "-v ${tokenHostPath}:${tokenContainerPath}"
        )

        $dockerRunCmd = $dockerRunBaseCmd + $dockerRunArgs
        $authedDockerRunCmd = $dockerRunBaseCmd + $authedDockerRunArgs + $dockerRunArgs

        $runImageBuilderCmd = $($dockerRunCmd -join ' ')
        $runAuthedImageBuilderCmd = $($authedDockerRunCmd -join ' ')

        Write-Host "##vso[task.setvariable variable=runImageBuilderCmd]$runImageBuilderCmd"
        Write-Host "##vso[task.setvariable variable=runAuthedImageBuilderCmd]$runAuthedImageBuilderCmd"
        Write-Host "##vso[task.setvariable variable=tokenHostFilePath]$tokenHostFilePath"

  ################################################################################
  # Setup Test Runner (Optional)
  ################################################################################
- ${{ if eq(parameters.setupTestRunner, 'true') }}:
  - script: $(engCommonPath)/pull-image.sh $(imageNames.testrunner)
    displayName: Pull Test Runner
    condition: and(succeeded(), ${{ parameters.condition }})
  - script: >
      docker build
      -t $(imageNames.testRunner.withrepo)
      --build-arg IMAGE=$(imageNames.testrunner)
      -f $(engCommonPath)/Dockerfile.WithRepo .
    displayName: Build Test Runner Image
    condition: and(succeeded(), ${{ parameters.condition }})
