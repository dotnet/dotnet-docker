parameters:
  setupImageBuilder: true
  condition: true

steps:
- template: /eng/common/templates/steps/init-common.yml@self
  parameters:
    condition: ${{ parameters.condition }}
- powershell: echo "##vso[task.setvariable variable=artifactsPath]$(Build.ArtifactStagingDirectory)"
  displayName: Define Artifacts Path Variable
  condition: and(succeeded(), ${{ parameters.condition }})

  ################################################################################
  # Cleanup Docker Resources
  ################################################################################
- template: /eng/common/templates/steps/cleanup-docker-windows.yml@self
  parameters:
    condition: ${{ parameters.condition }}

  ################################################################################
  # Setup Image Builder (Optional)
  ################################################################################
- ${{ if eq(parameters.setupImageBuilder, 'true') }}:
  - powershell: $(engCommonPath)/Invoke-WithRetry.ps1 "docker pull $(imageNames.imageBuilder)"
    displayName: Pull Image Builder
    condition: and(succeeded(), ${{ parameters.condition }})
  - script: docker create --name setupImageBuilder-$(Build.BuildId)-$(System.JobId) $(imageNames.imageBuilder)
    displayName: Create Setup Container
    condition: and(succeeded(), ${{ parameters.condition }})
  - script: >
      docker cp
      setupImageBuilder-$(Build.BuildId)-$(System.JobId):/image-builder
      $(Build.BinariesDirectory)/.Microsoft.DotNet.ImageBuilder
    displayName: Copy Image Builder
    condition: and(succeeded(), ${{ parameters.condition }})
  - script: docker rm -f setupImageBuilder-$(Build.BuildId)-$(System.JobId)
    displayName: Cleanup Setup Container
    condition: and(always(), ${{ parameters.condition }})
    continueOnError: true
  - task: PowerShell@2
    displayName: Define runImageBuilderCmd Variables
    condition: and(succeeded(), ${{ parameters.condition }})
    inputs:
      targetType: 'inline'
      script: |
        $tokenHostPath = '$(Agent.TempDirectory)'
        $tokenHostFilePath = "$tokenHostPath\token"

        $runImageBuilderCmd = "$(Build.BinariesDirectory)\.Microsoft.DotNet.ImageBuilder\Microsoft.DotNet.ImageBuilder.exe"

        $authedImageBuilderCmds = @(
          '$env:AZURE_TENANT_ID = $env:tenantId'
          '$env:AZURE_CLIENT_ID = $env:servicePrincipalId'
          '$env:AZURE_FEDERATED_TOKEN_FILE' + " = $tokenHostFilePath"
          $runImageBuilderCmd
        )

        $runAuthedImageBuilderCmd = $($authedImageBuilderCmds -join "; ")

        Write-Host "##vso[task.setvariable variable=runImageBuilderCmd]$runImageBuilderCmd"
        Write-Host "##vso[task.setvariable variable=runAuthedImageBuilderCmd]$runAuthedImageBuilderCmd"
        Write-Host "##vso[task.setvariable variable=tokenHostFilePath]$tokenHostFilePath"
