parameters:
  setupImageBuilder:  true

steps:
- script: echo "##vso[task.setvariable variable=artifactsPath]$(Build.ArtifactStagingDirectory)
  displayName: Define Artifacts Path Variable

- ${{ if eq(variables['System.TeamProject'], 'internal') }}:
  - script: echo '##vso[task.setvariable variable=imageBuilderImageInfoArg]--image-info-output-path $(artifactsPath)/$(legName)-image-info.json
    displayName: Set Image Info Arg for Image Builder
- ${{ if eq(variables['System.TeamProject'], 'public') }}:
  - script: echo '##vso[task.setvariable variable=imageBuilderImageInfoArg]
    displayName: Set Image Info Arg for Image Builder

  ################################################################################
  # Cleanup Docker Resources
  ################################################################################
- template: cleanup-docker-windows.yml

  ################################################################################
  # Setup Image Builder (Optional)
  ################################################################################
- ${{ if eq(parameters.setupImageBuilder, 'true') }}:
  - powershell: $(engCommonPath)/Invoke-WithRetry.ps1 "docker pull $(imageNames.imagebuilder.windows)"
    displayName: Pull Image Builder
  - script: docker create --name setupImageBuilder-$(Build.BuildId)-$(System.JobId) $(imageNames.imagebuilder.windows)
    displayName: Create Setup Container
  - script: >
      docker cp
      setupImageBuilder-$(Build.BuildId)-$(System.JobId):/image-builder
      $(Build.BinariesDirectory)/.Microsoft.DotNet.ImageBuilder
    displayName: Copy Image Builder
  - script: docker rm -f setupImageBuilder-$(Build.BuildId)-$(System.JobId)
    displayName: Cleanup Setup Container
    condition: always()
    continueOnError: true
  - script: >
      echo "##vso[task.setvariable variable=runImageBuilderCmd]
      $(Build.BinariesDirectory)\.Microsoft.DotNet.ImageBuilder\Microsoft.DotNet.ImageBuilder.exe
    displayName: Define runImageBuilderCmd Variable
