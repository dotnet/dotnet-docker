parameters:
  pool: {}
jobs:
- job: Publish
  pool: ${{ parameters.pool }}
  variables:
    imageBuilder.commonCmdArgs: >
      --manifest $(manifest)
      --registry-override $(acr.server)
      $(imageBuilder.queueArgs)
    # publicSourceBranch is not necessarily the working branch, it is the branch referenced in the readme Dockerfile source links
    ${{ if contains(variables['Build.SourceBranchName'], 'nightly') }}:
      publicSourceBranch: nightly
    ${{ if not(contains(variables['Build.SourceBranchName'], 'nightly')) }}:
      publicSourceBranch: master
  steps:
  - template: ../steps/init-docker-linux.yml
  - template: ../steps/download-build-artifact.yml
    parameters:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: image-info
    # Use dry-run option for certain publish operations if this is not a production build
  - script: |
      dryRunArg=""
      if [ "$PUBLISHREPOPREFIX" != "public/" ]; then
        dryRunArg=" --dry-run"
      fi
      echo "##vso[task.setvariable variable=dryRunArg]$dryRunArg"
    displayName: Set Publish Variables
  - script: >
      $(runImageBuilderCmd) copyAcrImages
      $(stagingRepoPrefix)
      $(acr.servicePrincipalName)
      $(app-dotnetdockerbuild-client-secret)
      $(acr.servicePrincipalTenant)
      $(acr.subscription)
      $(acr.resourceGroup)
      --os-type '*'
      --architecture '*'
      --repo-prefix $(publishRepoPrefix)
      --image-info $(artifactsPath)/image-info.json
      $(imageBuilder.pathArgs)
      $(imageBuilder.commonCmdArgs)
    displayName: Copy Images
  - script: >
      $(runImageBuilderCmd) publishManifest
      --repo-prefix $(publishRepoPrefix)
      --username $(acr.userName)
      --password $(BotAccount-dotnet-docker-acr-bot-password)
      --os-type '*'
      --architecture '*'
      $(imageBuilder.pathArgs)
      $(imageBuilder.commonCmdArgs)
    displayName: Publish Manifest
  - template: ../steps/publish-readmes.yml
    parameters:
      dryRunArg: $(dryRunArg)
      condition: and(succeeded(), eq(variables['publishReadme'], 'true'))
  - script: >
      $(runImageBuilderCmd) publishImageInfo
      $(dotnetBot-userName)
      $(dotnetBot-email)
      $(dotnet-bot-user-repo-adminrepohook-pat)
      $(artifactsPath)/image-info.json
      --git-owner dotnet
      --git-repo versions
      --git-branch master
      --git-path build-info/docker/image-info.$(Build.Repository.Name)-$(publicSourceBranch).json
      $(dryRunArg)
    displayName: Publish Image Info
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: Component Detection
  - template: ../steps/cleanup-docker-linux.yml
