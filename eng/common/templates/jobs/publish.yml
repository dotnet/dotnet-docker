parameters:
  pool: {}
jobs:
- job: Publish
  pool: ${{ parameters.pool }}
  variables:
  - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
    - group: DotNet-AllOrgs-Darc-Pats
  - name: imageBuilder.commonCmdArgs
    value: >
      --manifest '$(manifest)'
      --registry-override '$(acr.server)'
      $(manifestVariables)
      $(imageBuilder.queueArgs)
  steps:
  - template: ../steps/validate-branch.yml
  - template: ../steps/init-docker-linux.yml
  - template: ../steps/download-build-artifact.yml
    parameters:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: image-info
  - template: ../steps/set-image-info-path-var.yml
  - template: ../steps/set-dry-run.yml
  - script: echo $(sourceBuildId) > $(Build.ArtifactStagingDirectory)/source-build-id.txt
    displayName: Write Source Build ID to File
  - publish: $(Build.ArtifactStagingDirectory)/source-build-id.txt
    artifact: source-build-id
    displayName: Publish Source Build ID Artifact
  - script: echo "##vso[task.setvariable variable=imageQueueTime]$(date --rfc-2822)"
    displayName: Set Publish Variables
  - script: >
      $(runImageBuilderCmd) trimUnchangedPlatforms
      '$(artifactsPath)/image-info.json'
    displayName: Trim Unchanged Images
  - script: >
      $(runImageBuilderCmd) copyAcrImages
      '$(acr.servicePrincipalName)'
      '$(app-dotnetdockerbuild-client-secret)'
      '$(acr.servicePrincipalTenant)'
      '$(acr.subscription)'
      '$(acr.resourceGroup)'
      '$(stagingRepoPrefix)'
      --os-type '*'
      --architecture '*'
      --repo-prefix '$(publishRepoPrefix)'
      --image-info '$(artifactsPath)/image-info.json'
      $(dryRunArg)
      $(imageBuilder.pathArgs)
      $(imageBuilder.commonCmdArgs)
    displayName: Copy Images
  - script: >
      $(runImageBuilderCmd) publishManifest
      '$(artifactsPath)/image-info.json'
      --repo-prefix '$(publishRepoPrefix)'
      --registry-creds '$(acr.server)=$(acr.userName);$(BotAccount-dotnet-docker-acr-bot-password)'
      --os-type '*'
      --architecture '*'
      $(dryRunArg)
      $(imageBuilder.pathArgs)
      $(imageBuilder.commonCmdArgs)
    displayName: Publish Manifest
  - publish: $(Build.ArtifactStagingDirectory)/image-info.json
    artifact: image-info-final-$(System.JobAttempt)
    displayName: Publish Image Info File Artifact
  - template: ../steps/wait-for-mcr-image-ingestion.yml
    parameters:
      imageInfoPath: '$(artifactsPath)/image-info.json'
      minQueueTime: $(imageQueueTime)
      dryRunArg: $(dryRunArg)
      condition: succeeded()
  - template: ../steps/publish-readmes.yml
    parameters:
      dryRunArg: $(dryRunArg)
      condition: and(succeeded(), eq(variables['publishReadme'], 'true'))
  - script: >
      $(runImageBuilderCmd) publishImageInfo
      '$(artifactsPath)/image-info.json'
      '$(dotnetDockerBot.userName)'
      '$(dotnetDockerBot.email)'
      '$(BotAccount-dotnet-docker-bot-PAT)'
      '$(dn-bot-devdiv-dnceng-rw-code-pat)'
      'dnceng'
      'internal'
      --git-owner 'dotnet'
      --git-repo 'versions'
      --git-branch 'main'
      --git-path '$(imageInfoVersionsPath)'
      --azdo-repo 'dotnet-versions'
      --azdo-branch 'main'
      --azdo-path '$(imageInfoVersionsPath)'
      $(dryRunArg)
      $(imageBuilder.commonCmdArgs)
    displayName: Publish Image Info
  - script: >
      $(runImageBuilderCmd) ingestKustoImageInfo
      '$(artifactsPath)/image-info.json'
      '$(kusto.cluster)'
      '$(kusto.database)'
      '$(kusto.imageTable)'
      '$(kusto.layerTable)'
      '$(kusto.servicePrincipalName)'
      '$(app-DotnetDockerTelemetryIngestion-client-secret)'
      '$(kusto.servicePrincipalTenant)'
      --os-type '*'
      --architecture '*'
      $(dryRunArg)
      $(imageBuilder.commonCmdArgs)
    displayName: Ingest Kusto Image Info
  - template: ../steps/cleanup-docker-linux.yml
