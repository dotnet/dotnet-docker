parameters:
  pool: {}
jobs:
- job: Publish
  pool: ${{ parameters.pool }}
  variables:
    imageBuilder.commonCmdArgs: >
      --manifest '$(manifest)'
      --registry-override '$(acr.server)'
      $(manifestVariables)
      $(imageBuilder.queueArgs)
  steps:
  - template: ../steps/init-docker-linux.yml
  - template: ../steps/download-build-artifact.yml
    parameters:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: image-info
  - script: |
      # Use dry-run option for certain publish operations if this is not a production build
      dryRunArg=""
      if [[ "$PUBLISHREPOPREFIX" != "public/" || "$SYSTEM_TEAMPROJECT" == "public" ]]; then
        dryRunArg=" --dry-run"
      fi

      # Replace '/' with '-'
      buildRepoName=$(echo $BUILD_REPOSITORY_NAME | sed -e 's/\//-/g')

      # publicSourceBranch is not necessarily the working branch, it is the branch referenced in the readme Dockerfile source links
      if [ "$PUBLICSOURCEBRANCH" != "" ]; then
        publicSourceBranch=$PUBLICSOURCEBRANCH
      elif [[ $MANIFEST != *samples* && ($BUILD_SOURCEBRANCHNAME == nightly || $SYSTEM_PULLREQUEST_TARGETBRANCH == nightly) ]]; then
        publicSourceBranch="nightly"
      else
        publicSourceBranch="master"
      fi
      
      echo "##vso[task.setvariable variable=dryRunArg]$dryRunArg"
      echo "##vso[task.setvariable variable=buildRepoName]$buildRepoName"
      echo "##vso[task.setvariable variable=publicSourceBranch]$publicSourceBranch"
      echo "##vso[task.setvariable variable=imageQueueTime]$(date --rfc-2822)"
    displayName: Set Publish Variables
  - script: >
      $(runImageBuilderCmd) copyAcrImages
      '$(stagingRepoPrefix)'
      '$(acr.servicePrincipalName)'
      '$(app-dotnetdockerbuild-client-secret)'
      '$(acr.servicePrincipalTenant)'
      '$(acr.subscription)'
      '$(acr.resourceGroup)'
      --os-type '*'
      --architecture '*'
      --repo-prefix '$(publishRepoPrefix)'
      --image-info '$(artifactsPath)/image-info.json'
      $(dryRunArg)
      $(imageBuilder.pathArgs)
      $(imageBuilder.commonCmdArgs)
    displayName: Copy Images
  - script: >
      $(runImageBuilderCmd) publishManifest
      '$(artifactsPath)/image-info.json'
      --repo-prefix '$(publishRepoPrefix)'
      --username '$(acr.userName)'
      --password '$(BotAccount-dotnet-docker-acr-bot-password)'
      --os-type '*'
      --architecture '*'
      $(dryRunArg)
      $(imageBuilder.pathArgs)
      $(imageBuilder.commonCmdArgs)
    displayName: Publish Manifest
  - publish: $(Build.ArtifactStagingDirectory)/image-info.json
    artifact: image-info-final-$(System.JobAttempt)
    displayName: Publish Image Info File Artifact
  - template: ../steps/wait-for-mcr-image-ingestion.yml
    parameters:
      imageInfoPath: '$(artifactsPath)/image-info.json'
      minQueueTime: $(imageQueueTime)
  - template: ../steps/publish-readmes.yml
    parameters:
      dryRunArg: $(dryRunArg)
      condition: and(succeeded(), eq(variables['publishReadme'], 'true'))
  - script: >
      $(runImageBuilderCmd) publishImageInfo
      '$(artifactsPath)/image-info.json'
      '$(dotnetDockerBot.userName)'
      '$(dotnetDockerBot.email)'
      '$(BotAccount-dotnet-docker-bot-PAT)'
      --manifest '$(manifest)'
      --git-owner 'dotnet'
      --git-repo 'versions'
      --git-branch 'master'
      --git-path 'build-info/docker/image-info.$(buildRepoName)-$(publicSourceBranch)$(imageInfoVariant).json'
      $(dryRunArg)
      $(imageBuilder.commonCmdArgs)
    displayName: Publish Image Info
  - script: >
      $(runImageBuilderCmd) ingestKustoImageInfo
      '$(artifactsPath)/image-info.json'
      '$(kusto.cluster)'
      '$(kusto.database)'
      '$(kusto.table)'
      '$(kusto.servicePrincipalName)'
      '$(app-DotnetDockerTelemetryIngestion-client-secret)'
      '$(kusto.servicePrincipalTenant)'
      --manifest '$(manifest)'
      --os-type '*'
      --architecture '*'
      $(dryRunArg)
      $(imageBuilder.commonCmdArgs)
    displayName: Ingest Kusto Image Info
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: Component Detection
  - template: ../steps/cleanup-docker-linux.yml
