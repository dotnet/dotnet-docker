parameters:
  name: null
  pool: {}
  matrix: {}
  dockerClientOS: null
  buildJobTimeout: 60
  customInitSteps: []

jobs:
- job: ${{ parameters.name }}
  condition: and(succeeded(), ${{ parameters.matrix }})
  dependsOn: GenerateBuildMatrix
  pool: ${{ parameters.pool }}
  strategy:
    matrix: $[ ${{ parameters.matrix }} ]
  timeoutInMinutes: ${{ parameters.buildJobTimeout }}
  variables:
    osVersion: ${{ parameters.osVersion }}
    ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      imageBuilderBuildArgs: --registry-override $(acr.server) --repo-prefix $(stagingRepoPrefix) --push --username $(acr.userName) --password $(BotAccount-dotnet-docker-acr-bot-password) $(imageBuilder.queueArgs)
    ${{ if eq(variables['System.TeamProject'], 'public') }}:
      imageBuilderBuildArgs: $(imageBuilder.queueArgs)
    imageBuilderDockerRunExtraOptions: $(build.imageBuilderDockerRunExtraOptions)
  steps:
  - template: ${{ format('../steps/init-docker-{0}.yml', parameters.dockerClientOS) }}
  - ${{ parameters.customInitSteps }}
  - script: echo "##vso[task.setvariable variable=imageBuilderImageInfoArg]--image-info-output-path $(artifactsPath)/$(legName)-image-info.json"
    displayName: Set Image Info Arg for Image Builder
  - script: >
      $(runImageBuilderCmd) build
      --manifest $(manifest)
      $(imageBuilderPaths)
      $(osVersions)
      --os-type $(osType)
      --architecture $(architecture)
      --retry
      --source-repo $(publicGitRepoUri)
      $(manifestVariables)
      $(imageBuilderBuildArgs)
      $(imageBuilderImageInfoArg)
    displayName: Build Images
  - publish: $(Build.ArtifactStagingDirectory)/$(legName)-image-info.json
    artifact: $(legName)-image-info-$(System.JobAttempt)
    displayName: Publish Image Info File Artifact
  - ${{ if eq(variables['System.TeamProject'], 'public') }}:
    - template: ${{ format('../steps/test-images-{0}-client.yml', parameters.dockerClientOS) }}
  - template: ${{ format('../steps/cleanup-docker-{0}.yml', parameters.dockerClientOS) }}
