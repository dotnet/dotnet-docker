parameters:
  name: null
  pool: {}
  matrix: {}
  dockerClientOS: null
  buildJobTimeout: 60
  customInitSteps: []
  noCache: false
  internalProjectName: null
  publicProjectName: null
  internalVersionsRepoRef: null
  publicVersionsRepoRef: null

jobs:
- job: ${{ parameters.name }}
  condition: and(${{ parameters.matrix }}, not(canceled()), in(dependencies.PreBuildValidation.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))
  dependsOn:
  - PreBuildValidation
  - CopyBaseImages
  - GenerateBuildMatrix
  pool: ${{ parameters.pool }}
  strategy:
    matrix: $[ ${{ parameters.matrix }} ]
  timeoutInMinutes: ${{ parameters.buildJobTimeout }}
  variables:
    imageBuilderDockerRunExtraOptions: $(build.imageBuilderDockerRunExtraOptions)
    versionsRepoPath: versions
    sbomDirectory: $(Build.ArtifactStagingDirectory)/sbom
    ${{ if eq(parameters.noCache, false) }}:
      versionsBasePath: $(versionsRepoPath)/
      pipelineDisabledCache: false
    ${{ if eq(parameters.noCache, true) }}:
      versionsBasePath: ""
      pipelineDisabledCache: true
  steps:
  - checkout: self
  - ${{ if and(eq(variables['System.TeamProject'], parameters.publicProjectName), eq(parameters.noCache, false)) }}:
    - checkout: ${{ parameters.publicVersionsRepoRef }}
      path: s/$(versionsRepoPath)
  - ${{ if and(eq(variables['System.TeamProject'], parameters.internalProjectName), eq(parameters.noCache, false)) }}:
    - checkout: ${{ parameters.internalVersionsRepoRef }}
      path: s/$(versionsRepoPath)
  - ${{ if eq(parameters.noCache, false) }}:
    - powershell: |
        $pathSeparatorIndex = "$(Build.Repository.Name)".IndexOf("/")
        if ($pathSeparatorIndex -ge 0) {
          $buildRepoName = "$(Build.Repository.Name)".Substring($pathSeparatorIndex + 1)
        }
        else {
          $buildRepoName = "$(Build.Repository.Name)"
        }

        $engCommonPath = "$(Build.Repository.LocalPath)/$buildRepoName/$(engCommonRelativePath)"
        $engPath = "$(Build.Repository.LocalPath)/$buildRepoName/eng"
        $manifest = "$buildRepoName/$(manifest)"
        $testResultsDirectory = "$buildRepoName/$testResultsDirectory"

        if ("$(testScriptPath)") {
          $testScriptPath = "$buildRepoName/$(testScriptPath)"
        }

        echo "##vso[task.setvariable variable=buildRepoName]$buildRepoName"
        echo "##vso[task.setvariable variable=manifest]$manifest"
        echo "##vso[task.setvariable variable=engCommonPath]$engCommonPath"
        echo "##vso[task.setvariable variable=engPath]$engPath"
        echo "##vso[task.setvariable variable=testScriptPath]$testScriptPath"
        echo "##vso[task.setvariable variable=testResultsDirectory]$testResultsDirectory"
      displayName: Override Common Paths
  - powershell: |
      if ("${{ parameters.noCache }}" -eq "false") {
        $baseContainerRepoPath = "/repo/$(buildRepoName)"
      }
      else {
        $baseContainerRepoPath = "/repo"
      }
      echo "##vso[task.setvariable variable=baseContainerRepoPath]$baseContainerRepoPath"
    displayName: Set Base Container Repo Path
  - template: ${{ format('../steps/init-docker-{0}.yml', parameters.dockerClientOS) }}
  - ${{ parameters.customInitSteps }}
  - template: ../steps/set-image-info-path-var.yml
    parameters:
      publicSourceBranch: $(publicSourceBranch)
  - powershell: echo "##vso[task.setvariable variable=imageBuilderBuildArgs]"
    condition: eq(variables.imageBuilderBuildArgs, '')
    displayName: Initialize Image Builder Build Args
  - powershell: |
      $imageBuilderBuildArgs = "$(imageBuilderBuildArgs) $(imageBuilder.queueArgs) --image-info-output-path $(artifactsPath)/$(legName)-image-info.json"
      if ($env:SYSTEM_TEAMPROJECT -eq "${{ parameters.internalProjectName }}") {
        $imageBuilderBuildArgs = "$imageBuilderBuildArgs --registry-override $(acr.server) --repo-prefix $(stagingRepoPrefix) --source-repo-prefix $(mirrorRepoPrefix) --push --registry-creds ""$(acr.server)=$(acr.userName);$(acr.password)"""
      }

      # If the pipeline isn't configured to disable the cache and a build variable hasn't been set to disable the cache
      if ("$(pipelineDisabledCache)" -ne "true" -and $env:NOCACHE -ne "true") {
        $imageBuilderBuildArgs = "$imageBuilderBuildArgs --image-info-source-path $(versionsBasePath)$(imageInfoVersionsPath)"
      }

      echo "##vso[task.setvariable variable=imageBuilderBuildArgs]$imageBuilderBuildArgs"
    displayName: Set Image Builder Build Args
  - powershell: >
      $(runImageBuilderCmd) build
      --manifest $(manifest)
      $(imageBuilderPaths)
      $(osVersions)
      --os-type $(osType)
      --architecture $(architecture)
      --retry
      --source-repo $(publicGitRepoUri)
      --get-installed-pkgs-path $(baseContainerRepoPath)/$(engCommonRelativePath)/package-scripts/get-installed-packages.sh
      --digests-out-var 'builtImages'
      $(manifestVariables)
      $(imageBuilderBuildArgs)
    name: BuildImages
    displayName: Build Images
  - publish: $(Build.ArtifactStagingDirectory)/$(legName)-image-info.json
    artifact: $(legName)-image-info-$(System.JobAttempt)
    displayName: Publish Image Info File Artifact
  - ${{ if eq(variables['System.TeamProject'], parameters.internalProjectName) }}:
      # Define the task here to load it into the agent so that we can invoke the tool manually
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      inputs:
        BuildDropPath: $(Build.ArtifactStagingDirectory)
      displayName: Load Manifest Generator
      condition: and(succeeded(), ne(variables['BuildImages.builtImages'], ''))
    - powershell: |
        $images = "$(BuildImages.builtImages)"
        if (-not $images) { return 0 }
        $taskDir = $(Get-ChildItem -Recurse -Directory -Filter "ManifestGeneratorTask*" -Path '$(Agent.WorkFolder)').FullName
        $manifestToolDllPath = $(Get-ChildItem -Recurse -File -Filter "Microsoft.ManifestTool.dll" -Path $taskDir).FullName
        $dotnetDir = $(Get-ChildItem -Recurse -Directory -Filter "dotnet-*" -Path $taskDir).FullName

        # Call the manifest tool for each image to produce seperate SBOMs
        # Manifest tool docs: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/custom-sbom-generation-workflows
        $images -Split ',' | ForEach-Object {
          echo "Generating SBOM for $_";
          $formattedImageName = $_.Replace('$(acr.server)/$(stagingRepoPrefix)', "").Replace('/', '_').Replace(':', '_');
          $sbomChildDir = "$(sbomDirectory)/$formattedImageName";
          New-Item -Type Directory -Path $sbomChildDir > $null;
          & "$dotnetDir/dotnet" "$manifestToolDllPath" `
            Generate `
            -BuildDropPath '$(Build.ArtifactStagingDirectory)' `
            -BuildComponentPath '$(Agent.BuildDirectory)' `
            -PackageName '.NET' `
            -PackageVersion '$(Build.BuildNumber)' `
            -ManifestDirPath $sbomChildDir `
            -DockerImagesToScan $_ `
            -Verbosity Information 
        }
      displayName: Generate SBOMs
      condition: and(succeeded(), ne(variables['BuildImages.builtImages'], ''))
  - ${{ if eq(variables['System.TeamProject'], parameters.publicProjectName) }}:
    - template: ${{ format('../steps/test-images-{0}-client.yml', parameters.dockerClientOS) }}
      parameters:
        condition: ne(variables.testScriptPath, '')
  - template: ${{ format('../steps/cleanup-docker-{0}.yml', parameters.dockerClientOS) }}
  - ${{ if eq(variables['System.TeamProject'], parameters.internalProjectName) }}:
    - publish: $(sbomDirectory)
      artifact: $(legName)-sboms
      displayName: Publish SBOM
      condition: and(succeeded(), ne(variables['BuildImages.builtImages'], ''))
