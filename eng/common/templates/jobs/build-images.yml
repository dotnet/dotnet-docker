parameters:
  name: null
  pool: {}
  matrix: {}
  dockerClientOS: null
  buildJobTimeout: 60
  customInitSteps: []
  noCache: false

jobs:
- job: ${{ parameters.name }}
  condition: and(succeeded(), ${{ parameters.matrix }})
  dependsOn: 
    - PreBuildValidation
    - GenerateBuildMatrix
  pool: ${{ parameters.pool }}
  strategy:
    matrix: $[ ${{ parameters.matrix }} ]
  timeoutInMinutes: ${{ parameters.buildJobTimeout }}
  variables:
    imageBuilderDockerRunExtraOptions: $(build.imageBuilderDockerRunExtraOptions)
    versionsRepoPath: versions
    ${{ if eq(parameters.noCache, false) }}:
      versionsBasePath: $(versionsRepoPath)/
      pipelineDisabledCache: false
    ${{ if eq(parameters.noCache, true) }}:
      versionsBasePath: ""
      pipelineDisabledCache: true
  steps:
  - checkout: self
  - ${{ if and(eq(variables['System.TeamProject'], 'public'), eq(parameters.noCache, false)) }}:
    - checkout: VersionsRepo
      path: s/$(versionsRepoPath)
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.noCache, false)) }}:
    - checkout: git://internal/dotnet-versions
      path: s/$(versionsRepoPath)
  - ${{ if eq(parameters.noCache, false) }}:
    - powershell: |
        $pathSeparatorIndex = "$(Build.Repository.Name)".IndexOf("/")
        if ($pathSeparatorIndex -ge 0) {
          $buildRepoName = "$(Build.Repository.Name)".Substring($pathSeparatorIndex + 1)
        }
        else {
          $buildRepoName = "$(Build.Repository.Name)"
        }

        $engCommonPath = "$(Build.Repository.LocalPath)/$buildRepoName/$(engCommonRelativePath)"
        $engPath = "$(Build.Repository.LocalPath)/$buildRepoName/eng"
        $testScriptPath = "$buildRepoName/$(testScriptPath)"
        $manifest = "$buildRepoName/$(manifest)"
        $testResultsDirectory = "$buildRepoName/$testResultsDirectory"

        echo "##vso[task.setvariable variable=manifest]$manifest"
        echo "##vso[task.setvariable variable=engCommonPath]$engCommonPath"
        echo "##vso[task.setvariable variable=engPath]$engPath"
        echo "##vso[task.setvariable variable=testScriptPath]$testScriptPath"
        echo "##vso[task.setvariable variable=testResultsDirectory]$testResultsDirectory"
      displayName: Override Common Paths
  - template: ${{ format('../steps/init-docker-{0}.yml', parameters.dockerClientOS) }}
  - ${{ parameters.customInitSteps }}
  - template: ../steps/set-image-info-path-var.yml
  - powershell: |
      $imageBuilderBuildArgs = "$(imageBuilder.queueArgs) --image-info-output-path $(artifactsPath)/$(legName)-image-info.json"
      if ($env:SYSTEM_TEAMPROJECT -eq "internal") {
        $imageBuilderBuildArgs = "$imageBuilderBuildArgs --registry-override $(acr.server) --repo-prefix $(stagingRepoPrefix) --push --username $(acr.userName) --password $(BotAccount-dotnet-docker-acr-bot-password)"
      }

      # If the pipeline isn't configured to disable the cache and a build variable hasn't been set to disable the cache
      if ("$(pipelineDisabledCache)" -ne "true" -and $env:NOCACHE -ne "true") {
        $imageBuilderBuildArgs = "$imageBuilderBuildArgs --image-info-source-path $(versionsBasePath)$(imageInfoVersionsPath)"
      }

      echo "##vso[task.setvariable variable=imageBuilderBuildArgs]$imageBuilderBuildArgs"
    displayName: Set Image Builder Build Args
  - script: >
      $(runImageBuilderCmd) build
      --manifest $(manifest)
      $(imageBuilderPaths)
      $(osVersions)
      --os-type $(osType)
      --architecture $(architecture)
      --retry
      --source-repo $(publicGitRepoUri)
      $(manifestVariables)
      $(imageBuilderBuildArgs)
    displayName: Build Images
  - publish: $(Build.ArtifactStagingDirectory)/$(legName)-image-info.json
    artifact: $(legName)-image-info-$(System.JobAttempt)
    displayName: Publish Image Info File Artifact
  - ${{ if eq(variables['System.TeamProject'], 'public') }}:
    - template: ${{ format('../steps/test-images-{0}-client.yml', parameters.dockerClientOS) }}
  - template: ${{ format('../steps/cleanup-docker-{0}.yml', parameters.dockerClientOS) }}
