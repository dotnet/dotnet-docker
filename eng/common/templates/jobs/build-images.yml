parameters:
  name: null
  pool: {}
  matrix: {}
  dockerClientOS: null
  buildJobTimeout: 60
  commonInitStepsForMatrixAndBuild: []
  customInitSteps: []
  noCache: false
  internalProjectName: null
  publicProjectName: null
  isInternalServicingValidation: false

jobs:
- job: ${{ parameters.name }}
  condition: and(${{ parameters.matrix }}, not(canceled()), or(in(dependencies.PreBuildValidation.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'), eq(${{ parameters.isInternalServicingValidation }}, 'true')))
  dependsOn:
  - ${{ if eq(parameters.isInternalServicingValidation, 'false') }}:
    - PreBuildValidation
  - CopyBaseImages
  - GenerateBuildMatrix
  pool: ${{ parameters.pool }}
  strategy:
    matrix: $[ ${{ parameters.matrix }} ]
  timeoutInMinutes: ${{ parameters.buildJobTimeout }}
  variables:
    imageBuilderDockerRunExtraOptions: $(build.imageBuilderDockerRunExtraOptions)
    sbomDirectory: $(Build.ArtifactStagingDirectory)/sbom
    imageInfoHostDir: $(Build.ArtifactStagingDirectory)/imageInfo
    imageInfoContainerDir: $(artifactsPath)/imageInfo
  steps:
  - ${{ parameters.commonInitStepsForMatrixAndBuild }}
  - template: /eng/common/templates/jobs/${{ format('../steps/init-docker-{0}.yml', parameters.dockerClientOS) }}@self
    parameters:
      cleanupDocker: true
  - ${{ parameters.customInitSteps }}
  - template: /eng/common/templates/steps/set-image-info-path-var.yml@self
    parameters:
      publicSourceBranch: $(publicSourceBranch)
  - powershell: echo "##vso[task.setvariable variable=imageBuilderBuildArgs]"
    condition: eq(variables.imageBuilderBuildArgs, '')
    displayName: Initialize Image Builder Build Args
  - powershell: |
      New-Item -Path $(imageInfoHostDir) -ItemType Directory -Force

      # Reference the existing imageBuilderBuildArgs variable as an environment variable rather than injecting it directly
      # with the $(imageBuilderBuildArgs) syntax. This is to avoid issues where the string may contain single quotes $ chars
      # which really mess up assigning to a variable. It would require assigning the string with single quotes but also needing
      # to escape the single quotes that are in the string which would need to be done outside the context of PowerShell. Since
      # all we need is for that value to be in a PowerShell variable, we can get that by the fact that AzDO automatically creates
      # the environment variable for us.
      $imageBuilderBuildArgs = "$env:IMAGEBUILDERBUILDARGS $(imageBuilder.queueArgs) --image-info-output-path $(imageInfoContainerDir)/$(legName)-image-info.json $(commonMatrixAndBuildOptions)"
      if ($env:SYSTEM_TEAMPROJECT -eq "${{ parameters.internalProjectName }}" -and $env:BUILD_REASON -ne "PullRequest" -and "${{ parameters.isInternalServicingValidation }}" -ne "true") {
        $imageBuilderBuildArgs = "$imageBuilderBuildArgs --repo-prefix $(stagingRepoPrefix) --push"
      }

      # If the pipeline isn't configured to disable the cache and a build variable hasn't been set to disable the cache
      if ("$(pipelineDisabledCache)" -ne "true" -and $env:NOCACHE -ne "true") {
        $imageBuilderBuildArgs = "$imageBuilderBuildArgs --image-info-source-path $(versionsBasePath)$(imageInfoVersionsPath)"
      }

      echo "imageBuilderBuildArgs: $imageBuilderBuildArgs"
      echo "##vso[task.setvariable variable=imageBuilderBuildArgs]$imageBuilderBuildArgs"
    displayName: Set Image Builder Build Args
  - template: /eng/common/templates/steps/run-imagebuilder.yml@self
    parameters:
      name: BuildImages
      displayName: Build Images
      serviceConnection: $(build.serviceConnectionName)
      internalProjectName: ${{ parameters.internalProjectName }}
      dockerClientOS: ${{ parameters.dockerClientOS }}
      args: >
        build
        --manifest $(manifest)
        $(imageBuilderPaths)
        $(osVersions)
        --os-type $(osType)
        --architecture $(architecture)
        --retry
        --digests-out-var 'builtImages'
        --acr-subscription '$(acr-staging.subscription)'
        --acr-resource-group '$(acr-staging.resourceGroup)'
        $(manifestVariables)
        $(imageBuilderBuildArgs)
  - template: /eng/common/templates/steps/publish-artifact.yml@self
    parameters:
      path: $(imageInfoHostDir)
      artifactName: $(legName)-image-info-$(System.JobAttempt)
      displayName: Publish Image Info File Artifact
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
  - ${{ if and(eq(variables['System.TeamProject'], parameters.internalProjectName), ne(variables['Build.Reason'], 'PullRequest'), eq(parameters.isInternalServicingValidation, 'false')) }}:
    # The following task depends on the SBOM Manifest Generator task installed on the agent.
    # This task is auto-injected by 1ES Pipeline Templates so we don't need to install it ourselves.
    - powershell: |
        $images = "$(BuildImages.builtImages)"
        if (-not $images) { return 0 }

        # There can be leftover versions of the task left on the agent if it's not fresh. So find the latest version.
        $taskDir = $(Get-ChildItem -Recurse -Directory -Filter "ManifestGeneratorTask*" -Path '$(Agent.WorkFolder)')[-1].FullName

        # There may be multiple version directories within the task directory. Use the latest.
        $taskVersionDir = $(Get-ChildItem -Directory $taskDir | Sort-Object)[-1].FullName

        $manifestToolDllPath = $(Get-ChildItem -Recurse -File -Filter "Microsoft.ManifestTool.dll" -Path $taskVersionDir).FullName

        # Check whether the manifest task installed its own version of .NET.
        # To be more robust, we'll handle varying implementations that it's had.
        # First check for a dotnet folder in the task location
        $dotnetDir = $(Get-ChildItem -Recurse -Directory -Filter "dotnet-*" -Path $taskVersionDir).FullName
        if (-not $dotnetDir) {
          # If it's not there, check in the agent tools location
          $dotnetDir = $(Get-ChildItem -Recurse -Directory -Filter "*dotnet-*" -Path "$(Agent.ToolsDirectory)").FullName
        }

        # If the manifest task installed its own version of .NET use that; otherwise it's reusing an existing install of .NET
        # which is executable by default.
        if ($dotnetDir) {
          $dotnetPath = "$dotnetDir/dotnet"
        }
        else {
          $dotnetPath = "dotnet"
        }

        # Call the manifest tool for each image to produce seperate SBOMs
        # Manifest tool docs: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/custom-sbom-generation-workflows
        $images -Split ',' | ForEach-Object {
          echo "Generating SBOM for $_";
          $formattedImageName = $_.Replace('$(acr-staging.server)/$(stagingRepoPrefix)', "").Replace('/', '_').Replace(':', '_');
          $sbomChildDir = "$(sbomDirectory)/$formattedImageName";
          New-Item -Type Directory -Path $sbomChildDir > $null;
          & $dotnetPath "$manifestToolDllPath" `
            Generate `
            -BuildDropPath '$(Build.ArtifactStagingDirectory)' `
            -BuildComponentPath '$(Agent.BuildDirectory)' `
            -PackageName '.NET' `
            -PackageVersion '$(Build.BuildNumber)' `
            -ManifestDirPath $sbomChildDir `
            -DockerImagesToScan $_ `
            -Verbosity Information
        }
      displayName: Generate SBOMs
      condition: and(succeeded(), ne(variables['BuildImages.builtImages'], ''))
  - ${{ if or(eq(variables['Build.Reason'], 'PullRequest'), eq(parameters.isInternalServicingValidation, 'true')) }}:
    - template: /eng/common/templates/jobs/${{ format('../steps/test-images-{0}-client.yml', parameters.dockerClientOS) }}@self
      parameters:
        condition: ne(variables.testScriptPath, '')
  - ${{ if and(eq(variables['System.TeamProject'], parameters.internalProjectName), ne(variables['Build.Reason'], 'PullRequest'), eq(parameters.isInternalServicingValidation, 'false')) }}:
    - template: /eng/common/templates/steps/publish-artifact.yml@self
      parameters:
        path: $(sbomDirectory)
        artifactName: $(legName)-sboms
        displayName: Publish SBOM
        internalProjectName: ${{ parameters.internalProjectName }}
        publicProjectName: ${{ parameters.publicProjectName }}
        condition: ne(variables['BuildImages.builtImages'], '')
