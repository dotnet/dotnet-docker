parameters:
  pool: {}

jobs:
- job: Build
  pool: ${{ parameters.pool }}
  variables:
    imageInfosSubDir: "/image-infos"
    sbomSubDir: "/sbom"
  steps:
  - template: ../steps/init-docker-linux.yml
  - template: ../steps/download-build-artifact.yml
    parameters:
      targetPath: $(Build.ArtifactStagingDirectory)
  - powershell: |
      # Move all image-info artifacts to their own directory
      New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)$(imageInfosSubDir)
      Get-ChildItem -Directory -Filter "*-image-info-*" $(Build.ArtifactStagingDirectory) |
        Move-Item -Verbose -Destination $(Build.ArtifactStagingDirectory)$(imageInfosSubDir)
    displayName: Collect Image Info Files
  - powershell: |
      # Move the contents of all the SBOM artifact directories to a single location
      New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)$(sbomSubDir)
      Get-ChildItem -Directory -Filter "*-sboms" $(Build.ArtifactStagingDirectory) |
        ForEach-Object {
          Get-ChildItem $_ -Directory | Move-Item -Verbose -Destination $(Build.ArtifactStagingDirectory)$(sbomSubDir)
        }
    displayName: Consolidate SBOMs to Single Directory
  - powershell: |
      # Deletes the artifacts from all the unsuccessful jobs
      Get-ChildItem $(Build.ArtifactStagingDirectory)$(imageInfosSubDir) -Directory |
          ForEach-Object {
              [pscustomobject]@{
                  # Parse the artifact name to separate the base of the name from the job attempt number 
                  BaseName = $_.Name.Substring(0, $_.Name.LastIndexOf('-'));
                  JobAttempt = $_.Name.Substring($_.Name.LastIndexOf('-') + 1)
                  FullName = $_.FullName
              }
          } |
          Group-Object BaseName |
          # Delete all but the last artifact from each base name
          ForEach-Object {
              $_.Group |
                  Sort-Object JobAttempt |
                  Select-Object -ExpandProperty FullName -SkipLast 1 |
                  Remove-Item -Recurse -Force
          }
    displayName: Prune Publish Artifacts
  - script: >
      $(runImageBuilderCmd) mergeImageInfo
      --manifest $(manifest)
      $(artifactsPath)$(imageInfosSubDir)
      $(artifactsPath)$(imageInfosSubDir)/image-info.json
      $(manifestVariables)
    displayName: Merge Image Info Files
  - publish: $(Build.ArtifactStagingDirectory)$(sbomSubDir)
    artifact: sboms
    displayName: Publish SBOM Artifact
  - publish: $(Build.ArtifactStagingDirectory)$(imageInfosSubDir)/image-info.json
    artifact: image-info
    displayName: Publish Image Info File Artifact
