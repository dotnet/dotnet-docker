# This pipeline template injects the publish config for the dotnet-docker
# production (official) environment.
# The overall structure of this file should stay mostly in-sync with the
# publish-config-nonprod.yml template.

parameters:
# By default, images are staged in repos that are prefixed with this pipeline
# build ID. This is makes it easy to look up which pipeline images were built
# from and vice versa.
- name: sourceBuildPipelineRunId
  type: string
  default: $(Build.BuildId)

# This prefix is added to the staging repo when pushing images. If the trailing
# slash is omitted, it will not be added automatically.
- name: stagingRepoPrefix
  type: string
  default: "build-staging/"

# Images will have this prefix added to their repo name when pushed to the
# publishing ACR. If the trailing slash is omitted, it will not be added
# automatically.
- name: publishRepoPrefix
  type: string
  default: "public/"

# This template will have the publishConfig, internalProjectName, and
# publicProjectName parameters passed to it automatically.
- name: stagesTemplate
  type: string

# These parameters will be passed to the template referred to by the
# stagesTemplate parameter.
# Note: publishConfig, internalProjectName, and publicProjectName are passed
# automatically by this template. Don't define them in this parameter - they
# will get overwritten.
- name: stagesTemplateParameters
  type: object
  default: {}


stages:
- template: ${{ parameters.stagesTemplate }}
  parameters:
    ${{ insert }}: ${{ parameters.stagesTemplateParameters }}

    internalProjectName: "internal"
    publicProjectName: "public"

    publishConfig:
      internalMirrorAcr:
        server: $(acr-staging.server)
        repoPrefix: $(mirrorRepoPrefix)
        resourceGroup: $(acr-staging.resourceGroup)
        subscription: $(acr-staging.subscription)
        serviceConnection:
          name: $(internal-mirror.serviceConnectionName)
          id: $(internal-mirror.serviceConnection.id)
          clientId: $(internal-mirror.serviceConnection.clientId)
          tenantId: $(internal-mirror.serviceConnection.tenantId)

      publicMirrorAcr:
        server: $(public-mirror.server)
        resourceGroup: $(public-mirror.resourceGroup)
        subscription: $(public-mirror.subscription)
        serviceConnection:
          name: $(public-mirror.serviceConnectionName)
          id: $(public-mirror.serviceConnection.id)
          tenantId: $(public-mirror.serviceConnection.tenantId)
          clientId: $(public-mirror.serviceConnection.clientId)

      buildAcr:
        server: $(acr-staging.server)
        resourceGroup: $(acr-staging.resourceGroup)
        subscription: $(acr-staging.subscription)
        repoPrefix: "${{ parameters.stagingRepoPrefix }}${{ parameters.sourceBuildPipelineRunId }}/"
        serviceConnection:
          name: $(build.serviceConnectionName)
          id: $(build.serviceConnection.id)
          clientId: $(build.serviceConnection.clientId)
          tenantId: $(build.serviceConnection.tenantId)

      cleanServiceConnection:
        name: $(clean.serviceConnectionName)
        id: $(clean.serviceConnection.id)
        clientId: $(clean.serviceConnection.clientId)
        tenantId: $(clean.serviceConnection.tenantId)

      testServiceConnection:
        name: $(test.serviceConnectionName)
        id: $(test.serviceConnection.id)
        clientId: $(test.serviceConnection.clientId)
        tenantId: $(test.serviceConnection.tenantId)

      publishAcr:
        server: $(acr.server)
        resourceGroup: $(acr.resourceGroup)
        subscription: $(acr.subscription)
        repoPrefix: "${{ parameters.publishRepoPrefix }}"
        serviceConnection:
          name: $(publish.serviceConnectionName)
          id: $(publish.serviceConnection.id)
          clientId: $(publish.serviceConnection.clientId)
          tenantId: $(publish.serviceConnection.tenantId)
