parameters:
  buildMatrixType: platformDependencyGraph
  testMatrixType: platformVersionedOs
  buildMatrixCustomBuildLegGroupArgs: ""
  testMatrixCustomBuildLegGroupArgs: ""
  customBuildInitSteps: []
  customPublishInitSteps: []
  customPublishVariables: []
  
  linuxAmdBuildJobTimeout: 60
  linuxArmBuildJobTimeout: 60
  windowsAmdBuildJobTimeout: 60

  linuxAmdTestJobTimeout: 60
  linuxArmTestJobTimeout: 60
  windowsAmdTestJobTimeout: 60

  noCache: false

  internalProjectName: null
  publicProjectName: null

  internalVersionsRepoRef: null
  publicVersionsRepoRef: null

  linuxAmd64Pool:
    vmImage: $(defaultLinuxAmd64PoolImage)
  linuxArm32Pool:
    vmImage: $(defaultLinuxArm32PoolImage)
  linuxArm64Pool:
    vmImage: $(defaultLinuxArm64PoolImage)
  windows2016Pool:
    vmImage: $(defaultWindows2016PoolImage)
  windows1809Pool:
    vmImage: $(defaultWindows1809PoolImage)
  windows20H2Pool:
    vmImage: $(defaultWindows20H2PoolImage)
  windows2022Pool:
    vmImage: $(defaultWindows2022PoolImage)

stages:

################################################################################
# Build Images
################################################################################
- stage: Build
  condition: and(succeeded(), contains(variables['stages'], 'build'))
  jobs:
  - template: ../jobs/test-images-linux-client.yml
    parameters:
      name: PreBuildValidation
      pool: ${{ parameters.linuxAmd64Pool }}
      testJobTimeout: ${{ parameters.linuxAmdTestJobTimeout }}
      preBuildValidation: true
      internalProjectName: ${{ parameters.internalProjectName }}
  - template: ../jobs/copy-base-images.yml
    parameters:
      name: CopyBaseImages
      pool: ${{ parameters.linuxAmd64Pool }}
      additionalOptions: "--manifest '$(manifest)' $(manifestVariables)"
      publicProjectName: ${{ parameters.publicProjectName }}
  - template: ../jobs/generate-matrix.yml
    parameters:
      matrixType: ${{ parameters.buildMatrixType }}
      name: GenerateBuildMatrix
      pool: ${{ parameters.linuxAmd64Pool }}
      customBuildLegGroupArgs: ${{ parameters.buildMatrixCustomBuildLegGroupArgs }}
      internalProjectName: ${{ parameters.internalProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}
  - template: ../jobs/build-images.yml
    parameters:
      name: Linux_amd64
      pool: ${{ parameters.linuxAmd64Pool }}
      matrix: dependencies.GenerateBuildMatrix.outputs['matrix.LinuxAmd64']
      dockerClientOS: linux
      buildJobTimeout: ${{ parameters.linuxAmdBuildJobTimeout }}
      customInitSteps: ${{ parameters.customBuildInitSteps }}
      noCache: ${{ parameters.noCache }}
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}
  - template: ../jobs/build-images.yml
    parameters:
      name: Linux_arm64
      pool: ${{ parameters.linuxArm64Pool }}
      matrix: dependencies.GenerateBuildMatrix.outputs['matrix.LinuxArm64']
      dockerClientOS: linux
      buildJobTimeout: ${{ parameters.linuxArmBuildJobTimeout }}
      customInitSteps: ${{ parameters.customBuildInitSteps }}
      noCache: ${{ parameters.noCache }}
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}
  - template: ../jobs/build-images.yml
    parameters:
      name: Linux_arm32
      pool: ${{ parameters.linuxArm32Pool }}
      matrix: dependencies.GenerateBuildMatrix.outputs['matrix.LinuxArm32']
      dockerClientOS: linux
      buildJobTimeout: ${{ parameters.linuxArmBuildJobTimeout }}
      customInitSteps: ${{ parameters.customBuildInitSteps }}
      noCache: ${{ parameters.noCache }}
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}
  - template: ../jobs/build-images.yml
    parameters:
      name: Windows1809_amd64
      pool: ${{ parameters.windows1809Pool }}
      matrix: dependencies.GenerateBuildMatrix.outputs['matrix.Windows1809Amd64']
      dockerClientOS: windows
      buildJobTimeout: ${{ parameters.windowsAmdBuildJobTimeout }}
      customInitSteps: ${{ parameters.customBuildInitSteps }}
      noCache: ${{ parameters.noCache }}
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}
  - template: ../jobs/build-images.yml
    parameters:
      name: Windows20H2_amd64
      pool: ${{ parameters.windows20H2Pool }}
      matrix: dependencies.GenerateBuildMatrix.outputs['matrix.Windows20H2Amd64']
      dockerClientOS: windows
      buildJobTimeout: ${{ parameters.windowsAmdBuildJobTimeout }}
      customInitSteps: ${{ parameters.customBuildInitSteps }}
      noCache: ${{ parameters.noCache }}
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}
  - template: ../jobs/build-images.yml
    parameters:
      name: Windows2022_amd64
      pool: ${{ parameters.windows2022Pool }}
      matrix: dependencies.GenerateBuildMatrix.outputs['matrix.WindowsLtsc2022Amd64']
      dockerClientOS: windows
      buildJobTimeout: ${{ parameters.windowsAmdBuildJobTimeout }}
      customInitSteps: ${{ parameters.customBuildInitSteps }}
      noCache: ${{ parameters.noCache }}
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}
  - template: ../jobs/build-images.yml
    parameters:
      name: WindowsLtsc2016_amd64
      pool: ${{ parameters.windows2016Pool }}
      matrix: dependencies.GenerateBuildMatrix.outputs['matrix.WindowsLtsc2016Amd64']
      dockerClientOS: windows
      buildJobTimeout: ${{ parameters.windowsAmdBuildJobTimeout }}
      customInitSteps: ${{ parameters.customBuildInitSteps }}
      noCache: ${{ parameters.noCache }}
      internalProjectName: ${{ parameters.internalProjectName }}
      publicProjectName: ${{ parameters.publicProjectName }}
      internalVersionsRepoRef: ${{ parameters.internalVersionsRepoRef }}
      publicVersionsRepoRef: ${{ parameters.publicVersionsRepoRef }}

################################################################################
# Post-Build
################################################################################
- stage: Post_Build
  dependsOn: Build
  condition: and(succeeded(), contains(variables['stages'], 'build'))
  jobs:
  - template: ../jobs/post-build.yml
    parameters:
      pool: ${{ parameters.linuxAmd64Pool }}

################################################################################
# Test Images
################################################################################
- ${{ if eq(variables['System.TeamProject'], parameters.internalProjectName) }}:
  - stage: Test
    dependsOn: Post_Build
    condition: "
      and(
        ne(variables['testScriptPath'], ''),
        and(
          contains(variables['stages'], 'test'),
          or(
            and(
              succeeded(),
              contains(variables['stages'], 'build')),
            not(contains(variables['stages'], 'build')))))"
    jobs:
    - template: ../jobs/generate-matrix.yml
      parameters:
        matrixType: ${{ parameters.testMatrixType }}
        name: GenerateTestMatrix
        pool: ${{ parameters.linuxAmd64Pool }}
        customBuildLegGroupArgs: ${{ parameters.testMatrixCustomBuildLegGroupArgs }}
        isTestStage: true
        internalProjectName: ${{ parameters.internalProjectName }}
        publicProjectName: ${{ parameters.publicProjectName }}

    - template: ../jobs/test-images-linux-client.yml
      parameters:
        name: Linux_amd64
        pool: ${{ parameters.linuxAmd64Pool }}
        matrix: dependencies.GenerateTestMatrix.outputs['matrix.LinuxAmd64']
        testJobTimeout: ${{ parameters.linuxAmdTestJobTimeout }}
        internalProjectName: ${{ parameters.internalProjectName }}
    - template: ../jobs/test-images-linux-client.yml
      parameters:
        name: Linux_arm64
        pool: ${{ parameters.linuxArm64Pool }}
        matrix: dependencies.GenerateTestMatrix.outputs['matrix.LinuxArm64']
        testJobTimeout: ${{ parameters.linuxArmTestJobTimeout }}
        internalProjectName: ${{ parameters.internalProjectName }}
    - template: ../jobs/test-images-linux-client.yml
      parameters:
        name: Linux_arm32
        pool: ${{ parameters.linuxArm32Pool }}
        matrix: dependencies.GenerateTestMatrix.outputs['matrix.LinuxArm32']
        testJobTimeout: ${{ parameters.linuxArmTestJobTimeout }}
        internalProjectName: ${{ parameters.internalProjectName }}
    - template: ../jobs/test-images-windows-client.yml
      parameters:
        name: Windows1809_amd64
        pool: ${{ parameters.windows1809Pool }}
        matrix: dependencies.GenerateTestMatrix.outputs['matrix.Windows1809Amd64']
        testJobTimeout: ${{ parameters.windowsAmdTestJobTimeout }}
        internalProjectName: ${{ parameters.internalProjectName }}
    - template: ../jobs/test-images-windows-client.yml
      parameters:
        name: Windows20H2_amd64
        pool: ${{ parameters.windows20H2Pool }}
        matrix: dependencies.GenerateTestMatrix.outputs['matrix.Windows20H2Amd64']
        testJobTimeout: ${{ parameters.windowsAmdTestJobTimeout }}
        internalProjectName: ${{ parameters.internalProjectName }}
    - template: ../jobs/test-images-windows-client.yml
      parameters:
        name: Windows2022_amd64
        pool: ${{ parameters.windows2022Pool }}
        matrix: dependencies.GenerateTestMatrix.outputs['matrix.WindowsLtsc2022Amd64']
        testJobTimeout: ${{ parameters.windowsAmdTestJobTimeout }}
        internalProjectName: ${{ parameters.internalProjectName }}
    - template: ../jobs/test-images-windows-client.yml
      parameters:
        name: WindowsLtsc2016_amd64
        pool: ${{ parameters.windows2016Pool }}
        matrix: dependencies.GenerateTestMatrix.outputs['matrix.WindowsLtsc2016Amd64']
        testJobTimeout: ${{ parameters.windowsAmdTestJobTimeout }}
        internalProjectName: ${{ parameters.internalProjectName }}

################################################################################
# Generate SBOM
################################################################################
- ${{ if eq(variables['System.TeamProject'], parameters.internalProjectName) }}:
  - stage: Generate_SBOM
    dependsOn: Post_Build
    condition: "
      and(
        contains(variables['stages'], 'sbom'),
        or(
          and(
            succeeded(),
            contains(variables['stages'], 'build')),
          not(contains(variables['stages'], 'build'))))"
    jobs:
    - template: ../jobs/generate-sbom.yml
      parameters:
        pool: ${{ parameters.linuxAmd64Pool }}

################################################################################
# Publish Images
################################################################################
- stage: Publish
  ${{ if eq(variables['System.TeamProject'], parameters.internalProjectName) }}:
    dependsOn: Test
  ${{ if eq(variables['System.TeamProject'], parameters.publicProjectName) }}:
    dependsOn: Post_Build
  condition: "
    and(
      not(canceled()),
      and(
        contains(variables['stages'], 'publish'),
        or(
          or(
            and(
              and(
                contains(variables['stages'], 'build'),
                succeeded('Post_Build')),
              and(
                contains(variables['stages'], 'test'),
                in(dependencies.Test.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))),
            or(
              and(
                not(contains(variables['stages'], 'build')),
                and(
                  contains(variables['stages'], 'test'),
                  in(dependencies.Test.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))),
              and(
                not(contains(variables['stages'], 'test')),
                and(
                  contains(variables['stages'], 'build'),
                  succeeded('Post_Build'))))),
          not(
            or(
              contains(variables['stages'], 'build'),
              contains(variables['stages'], 'test'))))))"
  jobs:
  - template: ../jobs/publish.yml
    parameters:
      pool: ${{ parameters.linuxAmd64Pool }}
      internalProjectName: ${{ parameters.internalProjectName }}
      customPublishVariables: ${{ parameters.customPublishVariables }}
      customInitSteps: ${{ parameters.customPublishInitSteps }}
