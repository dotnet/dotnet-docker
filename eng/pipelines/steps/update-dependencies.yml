parameters:
  # The versionInfosArray parameter is used to specify the configuration for multiple Dockerfile versions.
  # This allows for a single PR to be generated for different internal .NET build versions.
  # This is required in order to publish a single set of internal images when the PR is merged.
  versionInfosArray: ""

  useInternalBuild: false

steps:
- powershell: |
    $versionInfos = '${{ parameters.versionInfosArray }}' | ConvertFrom-Json

    $index=0
    foreach ($versionInfo in $versionInfos) {
      $args = @{
        ProductVersion = $versionInfo.DockerfileVersion
        ComputeShas = $versionInfo.ComputeShas
        AzdoVariableName = "updateDepsArgs-$index"
        UseStableBranding = $versionInfo.StableBranding
      }

      if ($versionInfo.RuntimeVersion) {
        $args += @{
          RuntimeVersion = $versionInfo.RuntimeVersion
        }
      }

      if ($versionInfo.AspnetVersion) {
        $args += @{
          AspnetVersion = $versionInfo.AspnetVersion
        }
      }

      if ($versionInfo.SdkVersion) {
        $args += @{
          SdkVersion = $versionInfo.SdkVersion
        }
      }

      if ($versionInfo.MonitorVersion) {
        $args += @{
          MonitorVersion = $versionInfo.MonitorVersion
        }
      }

      if ("${{ parameters.useInternalBuild }}" -eq "true") {
        if ($versionInfo.MonitorVersion) {
          # .NET Monitor checksums are staged in the same account as the binaries
          $args["ChecksumSasQueryString"] = '"$(dotnetstage-account-sas-read-token)"'
        } else {
          $args["ChecksumSasQueryString"] = '"$(dotnetchecksumsstage-account-sas-read-token)"'
        }
        $args["BinarySasQueryString"] = '"$(dotnetstage-account-sas-read-token)"'
      }

      Write-Host "Executing Set-DotnetVersions.ps1 for $($versionInfo.DockerfileVersion)"
      $(engPath)/Set-DotnetVersions.ps1 @args
      $index++
    }
  displayName: Get update-dependencies args
- powershell: |
    $branchPrefix = ""
    if ("${{ parameters.useInternalBuild }}" -eq "true") {
      $branchPrefix = "internal/release/"
    }
    $targetBranch = $branchPrefix + $(& $(engPath)/Get-Branch.ps1)

    $customArgsArray = @()
    $index=0

    # Grab the variables that were set by the multiple calls to Set-DotnetVersions.ps1 and
    # add them to an array. This allows us to pass args for multiple Dockerfile versions.
    while ([Environment]::GetEnvironmentVariable("UPDATEDEPSARGS-$index") -ne $null) {
      $updateDepsArgs = [Environment]::GetEnvironmentVariable("UPDATEDEPSARGS-$index")
      $updateDepsArgs = "$updateDepsArgs --org dnceng --project $(System.TeamProject) --repo $(Build.Repository.Name) --target-branch $targetBranch"
      $customArgsArray += $updateDepsArgs
      $index++
    }
    
    echo "##vso[task.setvariable variable=customArgsArray]$($customArgsArray | ConvertTo-Json -Compress -AsArray)"
  displayName: Set Custom Args
- script: docker build -t update-dependencies -f $(engPath)/update-dependencies/Dockerfile --pull .
  displayName: Build Update Dependencies Tool
- script: docker run --name update-dependencies -d -t --entrypoint /bin/sh -v /var/run/docker.sock:/var/run/docker.sock update-dependencies
  displayName: Create Update Dependencies container
- powershell: |
    if ("${{ parameters.useInternalBuild }}" -eq "true") {
      $pat="$(dn-bot-devdiv-dnceng-rw-code-pat)"
    } else {
      $pat="$(BotAccount-dotnet-docker-bot-PAT)"
    }

    $credArgs = "--user $(dotnetDockerBot.userName) --email $(dotnetDockerBot.email) --password $pat"

    # Execute update-deps for each of the items in the customArgsArray, representing different Dockerfile versions
    # Ensure that the value is treated as an array by wrapping it in an array literal. This deals with the quirk of
    # how PowerShell treats a single item as a string instead of an array.
    $customArgsArray = @('$(customArgsArray)' | ConvertFrom-Json)
    foreach ($customArgs in $customArgsArray) {
      # If this is the last iteration, include the credentials to cause a PR to be generated
      if ($customArgs -eq $customArgsArray[-1]) {
        $customArgs += " $credArgs"
      }

      $command = "docker exec update-dependencies update-dependencies $customArgs"
      Invoke-Expression $command
    }
  displayName: Run Update Dependencies
- script: docker rm -f update-dependencies
  displayName: Remove Update Dependencies container
  condition: always()
