parameters:
  remoteDockerCleanup: false
  remoteDockerCleanupImage: null
steps:
  ################################################################################
  # Cleanup for remote Docker usage
  ################################################################################
  - ${{ if ne(parameters.remoteDockerCleanupImage, 'null') }}:
    - script: docker run --rm $(dockerArmRunArgs) --entrypoint docker $remoteDockerCleanupImage system prune -a -f --volumes
      displayName: Cleanup Remote Docker
      condition: always()
      continueOnError: true
      env:
        remoteDockerCleanupImage: ${{ parameters.remoteDockerCleanupImage }}
  - ${{ if or( eq(parameters.remoteDockerCleanup, 'true'), ne(parameters.remoteDockerCleanupImage, 'null') ) }}:
    # Don't stop any running containers as multiple build agents are used on a single host machine for remote docker scenarios
    - script: docker system prune -a -f --volumes
      displayName: Cleanup Local Docker

  ################################################################################
  # Cleanup for non-remote Docker usage
  ################################################################################
  - ${{ if and( eq(parameters.remoteDockerCleanup, 'false'), eq(parameters.remoteDockerCleanupImage, 'null') ) }}:
    - script: $(Build.Repository.LocalPath)/scripts/cleanup-docker.sh
      displayName: Cleanup Docker
      condition: always()
      continueOnError: true
