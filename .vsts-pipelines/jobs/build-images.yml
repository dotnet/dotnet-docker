parameters:
  name: null
  pool: {}
  matrix: {}
  dockerClientOS: null
  useRemoteDockerServer: false
jobs:
- job: ${{ parameters.name }}
  condition: "
    and(
      succeeded(),
      ${{ parameters.matrix }},
      or(
        eq(variables['singlePhase'], ''),
        eq(variables['singlePhase'], 'build')))"
  dependsOn: GenerateMatrices
  pool: ${{ parameters.pool }}
  strategy:
    matrix: $[ ${{ parameters.matrix }} ]
  variables:
    osVersion: ${{ parameters.osVersion }}
  steps:
  - script: >
      job="$(Agent.JobName)" &&
      sampleFolder=$(echo "$job" | grep -o -E "aspnetapp|dotnetapp") &&
      dockerfilePath="samples/$sampleFolder/Dockerfile" &&
      sed 's/:2.2 AS build/:2.2-stretch-arm32v7 AS build/g' $dockerfilePath > Dockerfile.tmp &&
      mv Dockerfile.tmp $dockerfilePath &&
      sed 's/:2.2 AS runtime/:2.2-stretch-slim-arm32v7 AS runtime/g' $dockerfilePath > Dockerfile.tmp &&
      mv Dockerfile.tmp $dockerfilePath
    displayName: Update Sample Dockerfile
    condition: "
      and(
        succeeded(),
        contains(variables['manifest'], 'samples'),
        eq('${{ parameters.name }}', 'Build_Linux_arm32v7'))"
  - template: ${{ format('../steps/init-docker-{0}.yml', parameters.dockerClientOS) }}
    parameters:
      setupRemoteDockerServer: ${{ parameters.useRemoteDockerServer }}
  - script: >
      $(runImageBuilderCmd) build
      --manifest $(manifest)
      $(imageBuilderPaths)
      --os-type $(osType)
      --os-version "$(osVersion)"
      --architecture $(architecture)
      --registry-override $(acr.server)
      --repo-prefix $(stagingRepoPrefix)
      --retry
      --push
      --username $(acr.userName)
      --password $(BotAccount-dotnet-docker-acr-bot-password)
      $(imageBuilder.queueArgs)
    displayName: Build Images
  - template: ${{ format('../steps/cleanup-docker-{0}.yml', parameters.dockerClientOS) }}
    parameters:
      cleanupRemoteDockerServer: ${{ parameters.useRemoteDockerServer }}
