parameters:
  name: null
  pool: {}
  matrix: {}
  dockerClientOS: null
  useRemoteDockerServer: false
jobs:
- job: ${{ parameters.name }}
  condition: "
    and(
      succeeded(),
      ${{ parameters.matrix }},
      or(
        eq(variables['singlePhase'], ''),
        eq(variables['singlePhase'], 'build')))"
  dependsOn: GenerateMatrices
  pool: ${{ parameters.pool }}
  strategy:
    matrix: $[ ${{ parameters.matrix }} ]
  variables:
    osVersion: ${{ parameters.osVersion }}
  steps:
  - template: ${{ format('../steps/init-docker-{0}.yml', parameters.dockerClientOS) }}
    parameters:
      setupRemoteDockerServer: ${{ parameters.useRemoteDockerServer }}
  - script: >
      $(runImageBuilderCmd) build
      --manifest $(manifest)
      $(imageBuilderPaths)
      --os-type $(osType)
      --os-version "$(osVersion)"
      --architecture $(architecture)
      --registry-override $(acr.server)
      --repo-prefix $(stagingRepoPrefix)
      --retry
      --push
      --username $(acr.userName)
      --password $(BotAccount-dotnet-docker-acr-bot-password)
      $(imageBuilder.queueArgs)
    displayName: Build Images
  - template: ${{ format('../steps/cleanup-docker-{0}.yml', parameters.dockerClientOS) }}
    parameters:
      cleanupRemoteDockerServer: ${{ parameters.useRemoteDockerServer }}
