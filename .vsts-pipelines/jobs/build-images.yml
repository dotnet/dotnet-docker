parameters:
  name: null
  pool: {}
  matrix: {}
  dockerClientOS: null
  useRemoteDockerServer: false

jobs:
- job: ${{ parameters.name }}
  condition: "
    and(
      succeeded(),
      ${{ parameters.matrix }},
      or(
        eq(variables['singlePhase'], ''),
        eq(variables['singlePhase'], 'build')))"
  dependsOn: GenerateMatrices
  pool: ${{ parameters.pool }}
  strategy:
    matrix: $[ ${{ parameters.matrix }} ]
  variables:
    osVersion: ${{ parameters.osVersion }}
    ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      imageBuilderBuildArgs: >
        --registry-override $(acr.server)
        --repo-prefix $(stagingRepoPrefix)
        --push
        --username $(acr.userName)
        --password $(BotAccount-dotnet-docker-acr-bot-password)
        $(imageBuilder.queueArgs)
    ${{ if eq(variables['System.TeamProject'], 'public') }}:
      imageBuilderBuildArgs: $(imageBuilder.queueArgs)
  steps:
  # This script is necessary to workaround there not being a matching architecture when pulling images
  # on an aarch64 machine. By using the multi-arch tag for the images referenced in the sample
  # Dockerfiles, the Docker CLI attempts to find a matching arch and can't find one. The workaround is
  # to manually update the Dockerfiles to refer to the architecture-specific images. The long-term
  # solution is to use the --platform option in Docker CLI when generally available.
  # See https://github.com/moby/moby/pull/37350
  - script: >
      job="$(Agent.JobName)" &&
      sampleFolder=$(echo "$job" | grep -o -E "aspnetapp|dotnetapp") &&
      dockerfilePath="samples/$sampleFolder/Dockerfile" &&
      sed 's/:2.2 AS build/:2.2-stretch-arm32v7 AS build/g' $dockerfilePath > Dockerfile.tmp &&
      mv Dockerfile.tmp $dockerfilePath &&
      sed 's/:2.2 AS runtime/:2.2-stretch-slim-arm32v7 AS runtime/g' $dockerfilePath > Dockerfile.tmp &&
      mv Dockerfile.tmp $dockerfilePath
    displayName: Update Sample Dockerfile
    condition: "
      and(
        succeeded(),
        contains(variables['manifest'], 'samples'),
        eq('${{ parameters.name }}', 'Build_Linux_arm32v7'))"
  - template: ${{ format('../steps/init-docker-{0}.yml', parameters.dockerClientOS) }}
    parameters:
      setupRemoteDockerServer: ${{ parameters.useRemoteDockerServer }}
  - script: >
      $(runImageBuilderCmd) build
      --manifest $(manifest)
      $(imageBuilderPaths)
      --os-type $(osType)
      --os-version "$(osVersion)"
      --architecture $(architecture)
      --retry
      $(imageBuilderBuildArgs)
    displayName: Build Images
  - ${{ if eq(variables['System.TeamProject'], 'public') }}:
    - template: ${{ format('../steps/test-images-{0}-client.yml', parameters.dockerClientOS) }}
  - template: ${{ format('../steps/cleanup-docker-{0}.yml', parameters.dockerClientOS) }}
    parameters:
      cleanupRemoteDockerServer: ${{ parameters.useRemoteDockerServer }}
