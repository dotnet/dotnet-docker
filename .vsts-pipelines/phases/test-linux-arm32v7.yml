phases:
  - phase: Test_Linux_arm32v7
    condition: and(ne(variables['repo'], 'dotnet-samples'), or(and(succeeded(), eq(variables['singlePhase'], '')), eq(variables['singlePhase'], 'test')))
    dependsOn:
      - Build_Linux_arm32v7
      - GenerateMatrices
    queue:
      name: DotNetCore-Infra
      demands:
        - agent.os -equals linux
        - DockerArch -equals arm32v7
      parallel: 100
      matrix: $[ dependencies.GenerateMatrices.outputs['testMatrix.testMatrixLinuxArm32v7'] ]
    variables:
      testRunner.container: testrunner-$(System.JobId)
    steps:
      - template: ../steps/docker-init-linux.yml
        parameters:
          setupRemoteDocker: true
          setupImageBuilder: false
          setupTestRunner: true
      - script: docker run -t -d -v $(repoVolume):/repo -w /repo $(dockerArmRunArgs) -e RUNNING_TESTS_IN_CONTAINER=true --name $(testRunner.container) $(testrunner.image)
        displayName: Start Test Runner Container
      - script: docker exec $(testRunner.container) docker login -u $(acr.userName) -p $(BotAccount-dotnet-docker-acr-bot-password) $(acr.server)
        displayName: Docker login
      - script: docker exec $(testRunner.container) pwsh -File ./tests/run-tests.ps1 -VersionFilter $(dotnetVersion)* -OSFilter $(osVersion)* -ArchitectureFilter arm -Repo $(acr.server)/$(repo)-$(stagingRepo.suffix) -DisableHttpVerification
        displayName: Test Images
      - script: docker exec $(testRunner.container) docker logout
        displayName: Docker logout
        condition: always()
        continueOnError: true
      - script: docker cp $(testRunner.container):/repo/tests/Microsoft.DotNet.Docker.Tests/TestResults/ $(Common.TestResultsDirectory)/.
        displayName: Copy Test Results
        condition: always()
        continueOnError: true
      - task: PublishTestResults@2
        displayName: Publish Test Results
        condition: always()
        continueOnError: true
        inputs:
          testRunner: vSTest
          testResultsFiles: '**/*.trx'
          searchFolder: $(Common.TestResultsDirectory)
          mergeTestResults: true
          publishRunAttachments: true
          testRunTitle: Linux $(dotnetVersion) $(osVersion) arm32v7
      - script: docker stop $(testRunner.container)
        displayName: Stop TestRunner Container
        condition: always()
        continueOnError: true
      - template: ../steps/docker-cleanup-linux.yml
        parameters:
          remoteDockerCleanupImage: $(testrunner.image)
